{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChromeTargetManager_instances, _ChromeTargetManager_connection, _ChromeTargetManager_discoveredTargetsByTargetId, _ChromeTargetManager_attachedTargetsByTargetId, _ChromeTargetManager_attachedTargetsBySessionId, _ChromeTargetManager_ignoredTargets, _ChromeTargetManager_targetFilterCallback, _ChromeTargetManager_targetFactory, _ChromeTargetManager_targetInterceptors, _ChromeTargetManager_attachedToTargetListenersBySession, _ChromeTargetManager_detachedFromTargetListenersBySession, _ChromeTargetManager_initializeCallback, _ChromeTargetManager_initializePromise, _ChromeTargetManager_targetsIdsForInit, _ChromeTargetManager_storeExistingTargetsForInit, _ChromeTargetManager_setupAttachmentListeners, _ChromeTargetManager_removeAttachmentListeners, _ChromeTargetManager_onSessionDetached, _ChromeTargetManager_onTargetCreated, _ChromeTargetManager_onTargetDestroyed, _ChromeTargetManager_onTargetInfoChanged, _ChromeTargetManager_onAttachedToTarget, _ChromeTargetManager_finishInitializationIfReady, _ChromeTargetManager_onDetachedFromTarget;\nimport { assert } from '../util/assert.js';\nimport { Connection } from './Connection.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { debugError } from './util.js';\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager extends EventEmitter {\n  constructor(connection, targetFactory, targetFilterCallback) {\n    super();\n    _ChromeTargetManager_instances.add(this);\n    _ChromeTargetManager_connection.set(this, void 0);\n    /**\n     * Keeps track of the following events: 'Target.targetCreated',\n     * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n     *\n     * A target becomes discovered when 'Target.targetCreated' is received.\n     * A target is removed from this map once 'Target.targetDestroyed' is\n     * received.\n     *\n     * `targetFilterCallback` has no effect on this map.\n     */\n    _ChromeTargetManager_discoveredTargetsByTargetId.set(this, new Map());\n    /**\n     * A target is added to this map once ChromeTargetManager has created\n     * a Target and attached at least once to it.\n     */\n    _ChromeTargetManager_attachedTargetsByTargetId.set(this, new Map());\n    /**\n     *\n     * Tracks which sessions attach to which target.\n     */\n    _ChromeTargetManager_attachedTargetsBySessionId.set(this, new Map());\n    /**\n     * If a target was filtered out by `targetFilterCallback`, we still receive\n     * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n     */\n    _ChromeTargetManager_ignoredTargets.set(this, new Set());\n    _ChromeTargetManager_targetFilterCallback.set(this, void 0);\n    _ChromeTargetManager_targetFactory.set(this, void 0);\n    _ChromeTargetManager_targetInterceptors.set(this, new WeakMap());\n    _ChromeTargetManager_attachedToTargetListenersBySession.set(this, new WeakMap());\n    _ChromeTargetManager_detachedFromTargetListenersBySession.set(this, new WeakMap());\n    _ChromeTargetManager_initializeCallback.set(this, () => {});\n    _ChromeTargetManager_initializePromise.set(this, new Promise(resolve => {\n      __classPrivateFieldSet(this, _ChromeTargetManager_initializeCallback, resolve, \"f\");\n    }));\n    _ChromeTargetManager_targetsIdsForInit.set(this, new Set());\n    _ChromeTargetManager_storeExistingTargetsForInit.set(this, () => {\n      for (const [targetId, targetInfo] of __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").entries()) {\n        if ((!__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\") || __classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\").call(this, targetInfo)) && targetInfo.type !== 'browser') {\n          __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").add(targetId);\n        }\n      }\n    });\n    _ChromeTargetManager_onSessionDetached.set(this, session => {\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, session);\n      __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").delete(session);\n    });\n    _ChromeTargetManager_onTargetCreated.set(this, async event => {\n      __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n      this.emit(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, event.targetInfo);\n      // The connection is already attached to the browser target implicitly,\n      // therefore, no new CDPSession is created and we have special handling\n      // here.\n      if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n        if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId)) {\n          return;\n        }\n        const target = __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, event.targetInfo, undefined);\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(event.targetInfo.targetId, target);\n      }\n    });\n    _ChromeTargetManager_onTargetDestroyed.set(this, event => {\n      const targetInfo = __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").get(event.targetId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").delete(event.targetId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, event.targetId);\n      if ((targetInfo === null || targetInfo === void 0 ? void 0 : targetInfo.type) === 'service_worker' && __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetId)) {\n        // Special case for service workers: report TargetGone event when\n        // the worker is destroyed.\n        const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetId);\n        this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(event.targetId);\n      }\n    });\n    _ChromeTargetManager_onTargetInfoChanged.set(this, event => {\n      __classPrivateFieldGet(this, _ChromeTargetManager_discoveredTargetsByTargetId, \"f\").set(event.targetInfo.targetId, event.targetInfo);\n      if (__classPrivateFieldGet(this, _ChromeTargetManager_ignoredTargets, \"f\").has(event.targetInfo.targetId) || !__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(event.targetInfo.targetId) || !event.targetInfo.attached) {\n        return;\n      }\n      const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(event.targetInfo.targetId);\n      this.emit(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, {\n        target: target,\n        targetInfo: event.targetInfo\n      });\n    });\n    _ChromeTargetManager_onAttachedToTarget.set(this, async (parentSession, event) => {\n      const targetInfo = event.targetInfo;\n      const session = __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").session(event.sessionId);\n      if (!session) {\n        throw new Error(`Session ${event.sessionId} was not created.`);\n      }\n      const silentDetach = async () => {\n        await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n        // We don't use `session.detach()` because that dispatches all commands on\n        // the connection instead of the parent session.\n        await parentSession.send('Target.detachFromTarget', {\n          sessionId: session.id()\n        }).catch(debugError);\n      };\n      if (!__classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n        return;\n      }\n      // Special case for service workers: being attached to service workers will\n      // prevent them from ever being destroyed. Therefore, we silently detach\n      // from service workers unless the connection was manually created via\n      // `page.worker()`. To determine this, we use\n      // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n      // should determine if a target is auto-attached or not with the help of\n      // CDP.\n      if (targetInfo.type === 'service_worker' && __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").isAutoAttached(targetInfo.targetId)) {\n        __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, targetInfo.targetId);\n        await silentDetach();\n        if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId)) {\n          return;\n        }\n        const target = __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, targetInfo);\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n        this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n        return;\n      }\n      if (__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\") && !__classPrivateFieldGet(this, _ChromeTargetManager_targetFilterCallback, \"f\").call(this, targetInfo)) {\n        __classPrivateFieldGet(this, _ChromeTargetManager_ignoredTargets, \"f\").add(targetInfo.targetId);\n        __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this, targetInfo.targetId);\n        await silentDetach();\n        return;\n      }\n      const existingTarget = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").has(targetInfo.targetId);\n      const target = existingTarget ? __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId) : __classPrivateFieldGet(this, _ChromeTargetManager_targetFactory, \"f\").call(this, targetInfo, session);\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(this, session);\n      if (existingTarget) {\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").get(targetInfo.targetId));\n      } else {\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").set(targetInfo.targetId, target);\n        __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").set(session.id(), target);\n      }\n      for (const interceptor of __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(parentSession) || []) {\n        if (!(parentSession instanceof Connection)) {\n          // Sanity check: if parent session is not a connection, it should be\n          // present in #attachedTargetsBySessionId.\n          assert(__classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").has(parentSession.id()));\n        }\n        await interceptor(target, parentSession instanceof Connection ? null : __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(parentSession.id()));\n      }\n      __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(target._targetId);\n      if (!existingTarget) {\n        this.emit(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, target);\n      }\n      __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this);\n      // TODO: the browser might be shutting down here. What do we do with the\n      // error?\n      await Promise.all([session.send('Target.setAutoAttach', {\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        autoAttach: true\n      }), session.send('Runtime.runIfWaitingForDebugger')]).catch(debugError);\n    });\n    _ChromeTargetManager_onDetachedFromTarget.set(this, (_parentSession, event) => {\n      const target = __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").get(event.sessionId);\n      __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsBySessionId, \"f\").delete(event.sessionId);\n      if (!target) {\n        return;\n      }\n      __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\").delete(target._targetId);\n      this.emit(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, target);\n    });\n    __classPrivateFieldSet(this, _ChromeTargetManager_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _ChromeTargetManager_targetFilterCallback, targetFilterCallback, \"f\");\n    __classPrivateFieldSet(this, _ChromeTargetManager_targetFactory, targetFactory, \"f\");\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").on('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_setupAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n    // TODO: remove `as any` once the protocol definitions are updated with the\n    // next Chromium roll.\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{\n        type: 'tab',\n        exclude: true\n      }, {}]\n    }).then(__classPrivateFieldGet(this, _ChromeTargetManager_storeExistingTargetsForInit, \"f\")).catch(debugError);\n  }\n  async initialize() {\n    await __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true\n    });\n    __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_finishInitializationIfReady).call(this);\n    await __classPrivateFieldGet(this, _ChromeTargetManager_initializePromise, \"f\");\n  }\n  dispose() {\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetCreated', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetCreated, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetDestroyed', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetDestroyed, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('Target.targetInfoChanged', __classPrivateFieldGet(this, _ChromeTargetManager_onTargetInfoChanged, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\").off('sessiondetached', __classPrivateFieldGet(this, _ChromeTargetManager_onSessionDetached, \"f\"));\n    __classPrivateFieldGet(this, _ChromeTargetManager_instances, \"m\", _ChromeTargetManager_removeAttachmentListeners).call(this, __classPrivateFieldGet(this, _ChromeTargetManager_connection, \"f\"));\n  }\n  getAvailableTargets() {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_attachedTargetsByTargetId, \"f\");\n  }\n  addTargetInterceptor(session, interceptor) {\n    const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(session) || [];\n    interceptors.push(interceptor);\n    __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(session, interceptors);\n  }\n  removeTargetInterceptor(client, interceptor) {\n    const interceptors = __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").get(client) || [];\n    __classPrivateFieldGet(this, _ChromeTargetManager_targetInterceptors, \"f\").set(client, interceptors.filter(currentInterceptor => {\n      return currentInterceptor !== interceptor;\n    }));\n  }\n}\n_ChromeTargetManager_connection = new WeakMap(), _ChromeTargetManager_discoveredTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsByTargetId = new WeakMap(), _ChromeTargetManager_attachedTargetsBySessionId = new WeakMap(), _ChromeTargetManager_ignoredTargets = new WeakMap(), _ChromeTargetManager_targetFilterCallback = new WeakMap(), _ChromeTargetManager_targetFactory = new WeakMap(), _ChromeTargetManager_targetInterceptors = new WeakMap(), _ChromeTargetManager_attachedToTargetListenersBySession = new WeakMap(), _ChromeTargetManager_detachedFromTargetListenersBySession = new WeakMap(), _ChromeTargetManager_initializeCallback = new WeakMap(), _ChromeTargetManager_initializePromise = new WeakMap(), _ChromeTargetManager_targetsIdsForInit = new WeakMap(), _ChromeTargetManager_storeExistingTargetsForInit = new WeakMap(), _ChromeTargetManager_onSessionDetached = new WeakMap(), _ChromeTargetManager_onTargetCreated = new WeakMap(), _ChromeTargetManager_onTargetDestroyed = new WeakMap(), _ChromeTargetManager_onTargetInfoChanged = new WeakMap(), _ChromeTargetManager_onAttachedToTarget = new WeakMap(), _ChromeTargetManager_onDetachedFromTarget = new WeakMap(), _ChromeTargetManager_instances = new WeakSet(), _ChromeTargetManager_setupAttachmentListeners = function _ChromeTargetManager_setupAttachmentListeners(session) {\n  const listener = event => {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_onAttachedToTarget, \"f\").call(this, session, event);\n  };\n  assert(!__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session));\n  __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").set(session, listener);\n  session.on('Target.attachedToTarget', listener);\n  const detachedListener = event => {\n    return __classPrivateFieldGet(this, _ChromeTargetManager_onDetachedFromTarget, \"f\").call(this, session, event);\n  };\n  assert(!__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session));\n  __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").set(session, detachedListener);\n  session.on('Target.detachedFromTarget', detachedListener);\n}, _ChromeTargetManager_removeAttachmentListeners = function _ChromeTargetManager_removeAttachmentListeners(session) {\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").has(session)) {\n    session.off('Target.attachedToTarget', __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").get(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_attachedToTargetListenersBySession, \"f\").delete(session);\n  }\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").has(session)) {\n    session.off('Target.detachedFromTarget', __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").get(session));\n    __classPrivateFieldGet(this, _ChromeTargetManager_detachedFromTargetListenersBySession, \"f\").delete(session);\n  }\n}, _ChromeTargetManager_finishInitializationIfReady = function _ChromeTargetManager_finishInitializationIfReady(targetId) {\n  targetId !== undefined && __classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").delete(targetId);\n  if (__classPrivateFieldGet(this, _ChromeTargetManager_targetsIdsForInit, \"f\").size === 0) {\n    __classPrivateFieldGet(this, _ChromeTargetManager_initializeCallback, \"f\").call(this);\n  }\n};","map":{"version":3,"mappings":"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","names":["assert","Connection","EventEmitter","debugError","ChromeTargetManager","constructor","connection","targetFactory","targetFilterCallback","_ChromeTargetManager_connection","_ChromeTargetManager_discoveredTargetsByTargetId","Map","_ChromeTargetManager_attachedTargetsByTargetId","_ChromeTargetManager_attachedTargetsBySessionId","_ChromeTargetManager_ignoredTargets","Set","_ChromeTargetManager_targetFilterCallback","_ChromeTargetManager_targetFactory","_ChromeTargetManager_targetInterceptors","WeakMap","_ChromeTargetManager_attachedToTargetListenersBySession","_ChromeTargetManager_detachedFromTargetListenersBySession","_ChromeTargetManager_initializeCallback","_ChromeTargetManager_initializePromise","Promise","resolve","__classPrivateFieldSet","_ChromeTargetManager_targetsIdsForInit","_ChromeTargetManager_storeExistingTargetsForInit","targetId","targetInfo","__classPrivateFieldGet","entries","type","add","_ChromeTargetManager_onSessionDetached","session","delete","_ChromeTargetManager_onTargetCreated","event","set","emit","attached","has","target","undefined","_ChromeTargetManager_onTargetDestroyed","get","_ChromeTargetManager_onTargetInfoChanged","_ChromeTargetManager_onAttachedToTarget","parentSession","sessionId","Error","silentDetach","send","catch","id","isAutoAttached","existingTarget","interceptor","_targetId","all","waitForDebuggerOnStart","flatten","autoAttach","_ChromeTargetManager_onDetachedFromTarget","_parentSession","on","discover","filter","exclude","then","initialize","dispose","off","getAvailableTargets","addTargetInterceptor","interceptors","push","removeTargetInterceptor","client","currentInterceptor","listener","detachedListener","size"],"sources":["../../../../src/common/ChromeTargetManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}