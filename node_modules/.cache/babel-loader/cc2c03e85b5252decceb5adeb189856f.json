{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert.js';\nimport { ElementHandle } from './ElementHandle.js';\nimport { Frame } from './Frame.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorld.js';\nasync function queryAXTree(client, element, accessibleName, role) {\n  const {\n    nodes\n  } = await client.send('Accessibility.queryAXTree', {\n    objectId: element.remoteObject().objectId,\n    accessibleName,\n    role\n  });\n  const filteredNodes = nodes.filter(node => {\n    return !node.role || node.role.value !== 'StaticText';\n  });\n  return filteredNodes;\n}\nconst normalizeValue = value => {\n  return value.replace(/ +/g, ' ').trim();\n};\nconst knownAttributes = new Set(['name', 'role']);\nconst attributeRegexp = /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\nfunction isKnownAttribute(attribute) {\n  return knownAttributes.has(attribute);\n}\n/**\n * The selectors consist of an accessible name to query for and optionally\n * further aria attributes on the form `[<attribute>=<value>]`.\n * Currently, we only support the `name` and `role` attribute.\n * The following examples showcase how the syntax works wrt. querying:\n *\n * - 'title[role=\"heading\"]' queries for elements with name 'title' and role 'heading'.\n * - '[role=\"img\"]' queries for elements with role 'img' and any name.\n * - 'label' queries for elements with name 'label' and any role.\n * - '[name=\"\"][role=\"button\"]' queries for elements with no name and role 'button'.\n */\nfunction parseAriaSelector(selector) {\n  const queryOptions = {};\n  const defaultName = selector.replace(attributeRegexp, (_, attribute, _quote, value) => {\n    attribute = attribute.trim();\n    assert(isKnownAttribute(attribute), `Unknown aria attribute \"${attribute}\" in selector`);\n    queryOptions[attribute] = normalizeValue(value);\n    return '';\n  });\n  if (defaultName && !queryOptions.name) {\n    queryOptions.name = normalizeValue(defaultName);\n  }\n  return queryOptions;\n}\nconst queryOneId = async (element, selector) => {\n  const {\n    name,\n    role\n  } = parseAriaSelector(selector);\n  const res = await queryAXTree(element.client, element, name, role);\n  if (!res[0] || !res[0].backendDOMNodeId) {\n    return null;\n  }\n  return res[0].backendDOMNodeId;\n};\nconst queryOne = async (element, selector) => {\n  const id = await queryOneId(element, selector);\n  if (!id) {\n    return null;\n  }\n  return await element.frame.worlds[MAIN_WORLD].adoptBackendNode(id);\n};\nconst waitFor = async (elementOrFrame, selector, options) => {\n  let frame;\n  let element;\n  if (elementOrFrame instanceof Frame) {\n    frame = elementOrFrame;\n  } else {\n    frame = elementOrFrame.frame;\n    element = await frame.worlds[PUPPETEER_WORLD].adoptHandle(elementOrFrame);\n  }\n  const ariaQuerySelector = async selector => {\n    const id = await queryOneId(element || (await frame.worlds[PUPPETEER_WORLD].document()), selector);\n    if (!id) {\n      return null;\n    }\n    return await frame.worlds[PUPPETEER_WORLD].adoptBackendNode(id);\n  };\n  const result = await frame.worlds[PUPPETEER_WORLD]._waitForSelectorInPage((_, selector) => {\n    return globalThis.ariaQuerySelector(selector);\n  }, element, selector, options, new Map([['ariaQuerySelector', ariaQuerySelector]]));\n  if (element) {\n    await element.dispose();\n  }\n  if (!(result instanceof ElementHandle)) {\n    await (result === null || result === void 0 ? void 0 : result.dispose());\n    return null;\n  }\n  return result.frame.worlds[MAIN_WORLD].transferHandle(result);\n};\nconst queryAll = async (element, selector) => {\n  const exeCtx = element.executionContext();\n  const {\n    name,\n    role\n  } = parseAriaSelector(selector);\n  const res = await queryAXTree(exeCtx._client, element, name, role);\n  const world = exeCtx._world;\n  return Promise.all(res.map(axNode => {\n    return world.adoptBackendNode(axNode.backendDOMNodeId);\n  }));\n};\n/**\n * @internal\n */\nexport const ariaHandler = {\n  queryOne,\n  waitFor,\n  queryAll\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,mBAAmB;AAExC,SAAQC,aAAa,QAAO,oBAAoB;AAChD,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,UAAU,EAAEC,eAAe,QAAO,oBAAoB;AAG9D,eAAeC,WAAW,CACxBC,MAAkB,EAClBC,OAA4B,EAC5BC,cAAuB,EACvBC,IAAa;EAEb,MAAM;IAACC;EAAK,CAAC,GAAG,MAAMJ,MAAM,CAACK,IAAI,CAAC,2BAA2B,EAAE;IAC7DC,QAAQ,EAAEL,OAAO,CAACM,YAAY,EAAE,CAACD,QAAQ;IACzCJ,cAAc;IACdC;GACD,CAAC;EACF,MAAMK,aAAa,GAAoCJ,KAAK,CAACK,MAAM,CAChEC,IAAmC,IAAI;IACtC,OAAO,CAACA,IAAI,CAACP,IAAI,IAAIO,IAAI,CAACP,IAAI,CAACQ,KAAK,KAAK,YAAY;EACvD,CAAC,CACF;EACD,OAAOH,aAAa;AACtB;AAEA,MAAMI,cAAc,GAAID,KAAa,IAAY;EAC/C,OAAOA,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;AACzC,CAAC;AACD,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,MAAMC,eAAe,GACnB,yFAAyF;AAG3F,SAASC,gBAAgB,CACvBC,SAAiB;EAEjB,OAAOJ,eAAe,CAACK,GAAG,CAACD,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;AAWA,SAASE,iBAAiB,CAACC,QAAgB;EACzC,MAAMC,YAAY,GAAoB,EAAE;EACxC,MAAMC,WAAW,GAAGF,QAAQ,CAACT,OAAO,CAClCI,eAAe,EACf,CAACQ,CAAC,EAAEN,SAAiB,EAAEO,MAAc,EAAEf,KAAa,KAAI;IACtDQ,SAAS,GAAGA,SAAS,CAACL,IAAI,EAAE;IAC5BpB,MAAM,CACJwB,gBAAgB,CAACC,SAAS,CAAC,EAC3B,2BAA2BA,SAAS,eAAe,CACpD;IACDI,YAAY,CAACJ,SAAS,CAAC,GAAGP,cAAc,CAACD,KAAK,CAAC;IAC/C,OAAO,EAAE;EACX,CAAC,CACF;EACD,IAAIa,WAAW,IAAI,CAACD,YAAY,CAACI,IAAI,EAAE;IACrCJ,YAAY,CAACI,IAAI,GAAGf,cAAc,CAACY,WAAW,CAAC;;EAEjD,OAAOD,YAAY;AACrB;AAEA,MAAMK,UAAU,GAAG,OAAO3B,OAA4B,EAAEqB,QAAgB,KAAI;EAC1E,MAAM;IAACK,IAAI;IAAExB;EAAI,CAAC,GAAGkB,iBAAiB,CAACC,QAAQ,CAAC;EAChD,MAAMO,GAAG,GAAG,MAAM9B,WAAW,CAACE,OAAO,CAACD,MAAM,EAAEC,OAAO,EAAE0B,IAAI,EAAExB,IAAI,CAAC;EAClE,IAAI,CAAC0B,GAAG,CAAC,CAAC,CAAC,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC,CAACC,gBAAgB,EAAE;IACvC,OAAO,IAAI;;EAEb,OAAOD,GAAG,CAAC,CAAC,CAAC,CAACC,gBAAgB;AAChC,CAAC;AAED,MAAMC,QAAQ,GAAsC,OAClD9B,OAAO,EACPqB,QAAQ,KACN;EACF,MAAMU,EAAE,GAAG,MAAMJ,UAAU,CAAC3B,OAAO,EAAEqB,QAAQ,CAAC;EAC9C,IAAI,CAACU,EAAE,EAAE;IACP,OAAO,IAAI;;EAEb,OAAQ,MAAM/B,OAAO,CAACgC,KAAK,CAACC,MAAM,CAACrC,UAAU,CAAC,CAACsC,gBAAgB,CAC7DH,EAAE,CACH;AACH,CAAC;AAED,MAAMI,OAAO,GAAqC,OAChDC,cAAc,EACdf,QAAQ,EACRgB,OAAO,KACL;EACF,IAAIL,KAAY;EAChB,IAAIhC,OAAwC;EAC5C,IAAIoC,cAAc,YAAYzC,KAAK,EAAE;IACnCqC,KAAK,GAAGI,cAAc;GACvB,MAAM;IACLJ,KAAK,GAAGI,cAAc,CAACJ,KAAK;IAC5BhC,OAAO,GAAG,MAAMgC,KAAK,CAACC,MAAM,CAACpC,eAAe,CAAC,CAACyC,WAAW,CAACF,cAAc,CAAC;;EAG3E,MAAMG,iBAAiB,GAAG,MAAOlB,QAAgB,IAAI;IACnD,MAAMU,EAAE,GAAG,MAAMJ,UAAU,CACzB3B,OAAO,KAAK,MAAMgC,KAAK,CAACC,MAAM,CAACpC,eAAe,CAAC,CAAC2C,QAAQ,EAAE,CAAC,EAC3DnB,QAAQ,CACT;IACD,IAAI,CAACU,EAAE,EAAE;MACP,OAAO,IAAI;;IAEb,OAAQ,MAAMC,KAAK,CAACC,MAAM,CAACpC,eAAe,CAAC,CAACqC,gBAAgB,CAC1DH,EAAE,CACH;EACH,CAAC;EAED,MAAMU,MAAM,GAAG,MAAMT,KAAK,CAACC,MAAM,CAACpC,eAAe,CAAC,CAAC6C,sBAAsB,CACvE,CAAClB,CAAU,EAAEH,QAAgB,KAAI;IAC/B,OACEsB,UAGD,CAACJ,iBAAiB,CAAClB,QAAQ,CAAC;EAC/B,CAAC,EACDrB,OAAO,EACPqB,QAAQ,EACRgB,OAAO,EACP,IAAIO,GAAG,CAAC,CAAC,CAAC,mBAAmB,EAAEL,iBAAiB,CAAC,CAAC,CAAC,CACpD;EACD,IAAIvC,OAAO,EAAE;IACX,MAAMA,OAAO,CAAC6C,OAAO,EAAE;;EAEzB,IAAI,EAAEJ,MAAM,YAAY/C,aAAa,CAAC,EAAE;IACtC,OAAM+C,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,OAAO,EAAE;IACvB,OAAO,IAAI;;EAEb,OAAOJ,MAAM,CAACT,KAAK,CAACC,MAAM,CAACrC,UAAU,CAAC,CAACkD,cAAc,CAACL,MAAM,CAAC;AAC/D,CAAC;AAED,MAAMM,QAAQ,GAAsC,OAClD/C,OAAO,EACPqB,QAAQ,KACN;EACF,MAAM2B,MAAM,GAAGhD,OAAO,CAACiD,gBAAgB,EAAE;EACzC,MAAM;IAACvB,IAAI;IAAExB;EAAI,CAAC,GAAGkB,iBAAiB,CAACC,QAAQ,CAAC;EAChD,MAAMO,GAAG,GAAG,MAAM9B,WAAW,CAACkD,MAAM,CAACE,OAAO,EAAElD,OAAO,EAAE0B,IAAI,EAAExB,IAAI,CAAC;EAClE,MAAMiD,KAAK,GAAGH,MAAM,CAACI,MAAO;EAC5B,OAAOC,OAAO,CAACC,GAAG,CAChB1B,GAAG,CAAC2B,GAAG,CAACC,MAAM,IAAG;IACf,OAAOL,KAAK,CAACjB,gBAAgB,CAACsB,MAAM,CAAC3B,gBAAgB,CAEpD;EACH,CAAC,CAAC,CACH;AACH,CAAC;AAED;;;AAGA,OAAO,MAAM4B,WAAW,GAA0B;EAChD3B,QAAQ;EACRK,OAAO;EACPY;CACD","names":["assert","ElementHandle","Frame","MAIN_WORLD","PUPPETEER_WORLD","queryAXTree","client","element","accessibleName","role","nodes","send","objectId","remoteObject","filteredNodes","filter","node","value","normalizeValue","replace","trim","knownAttributes","Set","attributeRegexp","isKnownAttribute","attribute","has","parseAriaSelector","selector","queryOptions","defaultName","_","_quote","name","queryOneId","res","backendDOMNodeId","queryOne","id","frame","worlds","adoptBackendNode","waitFor","elementOrFrame","options","adoptHandle","ariaQuerySelector","document","result","_waitForSelectorInPage","globalThis","Map","dispose","transferHandle","queryAll","exeCtx","executionContext","_client","world","_world","Promise","all","map","axNode","ariaHandler"],"sources":["../../../../src/common/AriaQueryHandler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}