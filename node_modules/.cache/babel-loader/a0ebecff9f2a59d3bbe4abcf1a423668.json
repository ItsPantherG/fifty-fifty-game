{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ariaHandler } from './AriaQueryHandler.js';\nimport { ElementHandle } from './ElementHandle.js';\nimport { Frame } from './Frame.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorld.js';\nfunction createPuppeteerQueryHandler(handler) {\n  const internalHandler = {};\n  if (handler.queryOne) {\n    const queryOne = handler.queryOne;\n    internalHandler.queryOne = async (element, selector) => {\n      const jsHandle = await element.evaluateHandle(queryOne, selector, await element.executionContext()._world.puppeteerUtil);\n      const elementHandle = jsHandle.asElement();\n      if (elementHandle) {\n        return elementHandle;\n      }\n      await jsHandle.dispose();\n      return null;\n    };\n    internalHandler.waitFor = async (elementOrFrame, selector, options) => {\n      let frame;\n      let element;\n      if (elementOrFrame instanceof Frame) {\n        frame = elementOrFrame;\n      } else {\n        frame = elementOrFrame.frame;\n        element = await frame.worlds[PUPPETEER_WORLD].adoptHandle(elementOrFrame);\n      }\n      const result = await frame.worlds[PUPPETEER_WORLD]._waitForSelectorInPage(queryOne, element, selector, options);\n      if (element) {\n        await element.dispose();\n      }\n      if (!result) {\n        return null;\n      }\n      if (!(result instanceof ElementHandle)) {\n        await result.dispose();\n        return null;\n      }\n      return frame.worlds[MAIN_WORLD].transferHandle(result);\n    };\n  }\n  if (handler.queryAll) {\n    const queryAll = handler.queryAll;\n    internalHandler.queryAll = async (element, selector) => {\n      const jsHandle = await element.evaluateHandle(queryAll, selector, await element.executionContext()._world.puppeteerUtil);\n      const properties = await jsHandle.getProperties();\n      await jsHandle.dispose();\n      const result = [];\n      for (const property of properties.values()) {\n        const elementHandle = property.asElement();\n        if (elementHandle) {\n          result.push(elementHandle);\n        }\n      }\n      return result;\n    };\n  }\n  return internalHandler;\n}\nconst defaultHandler = createPuppeteerQueryHandler({\n  queryOne: (element, selector) => {\n    if (!('querySelector' in element)) {\n      throw new Error(`Could not invoke \\`querySelector\\` on node of type ${element.nodeName}.`);\n    }\n    return element.querySelector(selector);\n  },\n  queryAll: (element, selector) => {\n    if (!('querySelectorAll' in element)) {\n      throw new Error(`Could not invoke \\`querySelectorAll\\` on node of type ${element.nodeName}.`);\n    }\n    return [...element.querySelectorAll(selector)];\n  }\n});\nconst pierceHandler = createPuppeteerQueryHandler({\n  queryOne: (element, selector, _ref) => {\n    let {\n      pierceQuerySelector\n    } = _ref;\n    return pierceQuerySelector(element, selector);\n  },\n  queryAll: (element, selector, _ref2) => {\n    let {\n      pierceQuerySelectorAll\n    } = _ref2;\n    return pierceQuerySelectorAll(element, selector);\n  }\n});\nconst xpathHandler = createPuppeteerQueryHandler({\n  queryOne: (element, selector, _ref3) => {\n    let {\n      xpathQuerySelector\n    } = _ref3;\n    return xpathQuerySelector(element, selector);\n  },\n  queryAll: (element, selector, _ref4) => {\n    let {\n      xpathQuerySelectorAll\n    } = _ref4;\n    return xpathQuerySelectorAll(element, selector);\n  }\n});\nconst textQueryHandler = createPuppeteerQueryHandler({\n  queryOne: (element, selector, _ref5) => {\n    let {\n      textQuerySelector\n    } = _ref5;\n    return textQuerySelector(element, selector);\n  },\n  queryAll: (element, selector, _ref6) => {\n    let {\n      textQuerySelectorAll\n    } = _ref6;\n    return textQuerySelectorAll(element, selector);\n  }\n});\nconst INTERNAL_QUERY_HANDLERS = new Map([['aria', {\n  handler: ariaHandler\n}], ['pierce', {\n  handler: pierceHandler\n}], ['xpath', {\n  handler: xpathHandler\n}], ['text', {\n  handler: textQueryHandler\n}]]);\nconst QUERY_HANDLERS = new Map();\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nexport function registerCustomQueryHandler(name, handler) {\n  if (INTERNAL_QUERY_HANDLERS.has(name)) {\n    throw new Error(`A query handler named \"${name}\" already exists`);\n  }\n  if (QUERY_HANDLERS.has(name)) {\n    throw new Error(`A custom query handler named \"${name}\" already exists`);\n  }\n  const isValidName = /^[a-zA-Z]+$/.test(name);\n  if (!isValidName) {\n    throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n  }\n  QUERY_HANDLERS.set(name, {\n    handler: createPuppeteerQueryHandler(handler)\n  });\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nexport function unregisterCustomQueryHandler(name) {\n  QUERY_HANDLERS.delete(name);\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nexport function customQueryHandlerNames() {\n  return [...QUERY_HANDLERS.keys()];\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nexport function clearCustomQueryHandlers() {\n  QUERY_HANDLERS.clear();\n}\nconst CUSTOM_QUERY_SEPARATORS = ['=', '/'];\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector) {\n  for (const handlerMap of [QUERY_HANDLERS, INTERNAL_QUERY_HANDLERS]) {\n    for (const [name, {\n      handler: queryHandler,\n      transformSelector\n    }] of handlerMap) {\n      for (const separator of CUSTOM_QUERY_SEPARATORS) {\n        const prefix = `${name}${separator}`;\n        if (selector.startsWith(prefix)) {\n          selector = selector.slice(prefix.length);\n          if (transformSelector) {\n            selector = transformSelector(selector);\n          }\n          return {\n            updatedSelector: selector,\n            queryHandler\n          };\n        }\n      }\n    }\n  }\n  return {\n    updatedSelector: selector,\n    queryHandler: defaultHandler\n  };\n}","map":{"version":3,"mappings":"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","names":["ariaHandler","ElementHandle","Frame","MAIN_WORLD","PUPPETEER_WORLD","createPuppeteerQueryHandler","handler","internalHandler","queryOne","element","selector","jsHandle","evaluateHandle","executionContext","_world","puppeteerUtil","elementHandle","asElement","dispose","waitFor","elementOrFrame","options","frame","worlds","adoptHandle","result","_waitForSelectorInPage","transferHandle","queryAll","properties","getProperties","property","values","push","defaultHandler","Error","nodeName","querySelector","querySelectorAll","pierceHandler","pierceQuerySelector","pierceQuerySelectorAll","xpathHandler","xpathQuerySelector","xpathQuerySelectorAll","textQueryHandler","textQuerySelector","textQuerySelectorAll","INTERNAL_QUERY_HANDLERS","Map","QUERY_HANDLERS","registerCustomQueryHandler","name","has","isValidName","test","set","unregisterCustomQueryHandler","delete","customQueryHandlerNames","keys","clearCustomQueryHandlers","clear","CUSTOM_QUERY_SEPARATORS","getQueryHandlerAndSelector","handlerMap","queryHandler","transformSelector","separator","prefix","startsWith","slice","length","updatedSelector"],"sources":["../../../../src/common/QueryHandler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}