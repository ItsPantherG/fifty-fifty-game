{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport mitt from '../../third_party/mitt/index.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    this.eventsMap = new Map();\n    this.emitter = mitt(this.eventsMap);\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param event - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(event, handler) {\n    this.emitter.on(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param event - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(event, handler) {\n    this.emitter.off(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener.\n   * @deprecated please use {@link EventEmitter.off} instead.\n   */\n  removeListener(event, handler) {\n    this.off(event, handler);\n    return this;\n  }\n  /**\n   * Add an event listener.\n   * @deprecated please use {@link EventEmitter.on} instead.\n   */\n  addListener(event, handler) {\n    this.on(event, handler);\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param event - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(event, eventData) {\n    this.emitter.emit(event, eventData);\n    return this.eventListenersCount(event) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param event - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(event, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(event, onceHandler);\n    };\n    return this.on(event, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param event - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(event) {\n    return this.eventListenersCount(event);\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   * @param event - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.eventsMap.delete(event);\n    } else {\n      this.eventsMap.clear();\n    }\n    return this;\n  }\n  eventListenersCount(event) {\n    var _a;\n    return ((_a = this.eventsMap.get(event)) === null || _a === void 0 ? void 0 : _a.length) || 0;\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,IAIN,MAAM,iCAAiC;AA0BxC;;;;;;;;;;;;AAYA,OAAM,MAAOC,YAAY;EAIvB;;;EAGAC;IALQ,cAAS,GAAG,IAAIC,GAAG,EAAwB;IAMjD,IAAI,CAACC,OAAO,GAAGJ,IAAI,CAAC,IAAI,CAACK,SAAS,CAAC;EACrC;EAEA;;;;;;EAMAC,EAAE,CAACC,KAAgB,EAAEC,OAAgB;IACnC,IAAI,CAACJ,OAAO,CAACE,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;EAMAC,GAAG,CAACF,KAAgB,EAAEC,OAAgB;IACpC,IAAI,CAACJ,OAAO,CAACK,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EAEA;;;;EAIAE,cAAc,CAACH,KAAgB,EAAEC,OAAgB;IAC/C,IAAI,CAACC,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IACxB,OAAO,IAAI;EACb;EAEA;;;;EAIAG,WAAW,CAACJ,KAAgB,EAAEC,OAAgB;IAC5C,IAAI,CAACF,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IACvB,OAAO,IAAI;EACb;EAEA;;;;;;;EAOAI,IAAI,CAACL,KAAgB,EAAEM,SAAmB;IACxC,IAAI,CAACT,OAAO,CAACQ,IAAI,CAACL,KAAK,EAAEM,SAAS,CAAC;IACnC,OAAO,IAAI,CAACC,mBAAmB,CAACP,KAAK,CAAC,GAAG,CAAC;EAC5C;EAEA;;;;;;EAMAQ,IAAI,CAACR,KAAgB,EAAEC,OAAgB;IACrC,MAAMQ,WAAW,GAAYH,SAAS,IAAG;MACvCL,OAAO,CAACK,SAAS,CAAC;MAClB,IAAI,CAACJ,GAAG,CAACF,KAAK,EAAES,WAAW,CAAC;IAC9B,CAAC;IAED,OAAO,IAAI,CAACV,EAAE,CAACC,KAAK,EAAES,WAAW,CAAC;EACpC;EAEA;;;;;;EAMAC,aAAa,CAACV,KAAgB;IAC5B,OAAO,IAAI,CAACO,mBAAmB,CAACP,KAAK,CAAC;EACxC;EAEA;;;;;;EAMAW,kBAAkB,CAACX,KAAiB;IAClC,IAAIA,KAAK,EAAE;MACT,IAAI,CAACF,SAAS,CAACc,MAAM,CAACZ,KAAK,CAAC;KAC7B,MAAM;MACL,IAAI,CAACF,SAAS,CAACe,KAAK,EAAE;;IAExB,OAAO,IAAI;EACb;EAEQN,mBAAmB,CAACP,KAAgB;;IAC1C,OAAO,WAAI,CAACF,SAAS,CAACgB,GAAG,CAACd,KAAK,CAAC,0CAAEe,MAAM,KAAI,CAAC;EAC/C","names":["mitt","EventEmitter","constructor","Map","emitter","eventsMap","on","event","handler","off","removeListener","addListener","emit","eventData","eventListenersCount","once","onceHandler","listenerCount","removeAllListeners","delete","clear","get","length"],"sources":["../../../../src/common/EventEmitter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}