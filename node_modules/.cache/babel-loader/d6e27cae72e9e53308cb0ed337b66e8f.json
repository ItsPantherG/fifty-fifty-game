{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Puppeteer = void 0;\nconst BrowserConnector_js_1 = require(\"./BrowserConnector.js\");\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\nclass Puppeteer {\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    /**\n     * @internal\n     */\n    this._changedProduct = false;\n    this._isPuppeteerCore = settings.isPuppeteerCore;\n    this.connect = this.connect.bind(this);\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is only\n   * allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```\n   * puppeteer.registerCustomQueryHandler('text', { … });\n   * const aHandle = await page.$('text/…');\n   * ```\n   *\n   * @param name - The name that the custom query handler will be registered\n   * under.\n   * @param queryHandler - The {@link CustomQueryHandler | custom query handler}\n   * to register.\n   *\n   * @public\n   */\n  static registerCustomQueryHandler(name, queryHandler) {\n    return (0, QueryHandler_js_1.registerCustomQueryHandler)(name, queryHandler);\n  }\n  /**\n   * Unregisters a custom query handler for a given name.\n   */\n  static unregisterCustomQueryHandler(name) {\n    return (0, QueryHandler_js_1.unregisterCustomQueryHandler)(name);\n  }\n  /**\n   * Gets the names of all custom query handlers.\n   */\n  static customQueryHandlerNames() {\n    return (0, QueryHandler_js_1.customQueryHandlerNames)();\n  }\n  /**\n   * Unregisters all custom query handlers.\n   */\n  static clearCustomQueryHandlers() {\n    return (0, QueryHandler_js_1.clearCustomQueryHandlers)();\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @remarks\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return (0, BrowserConnector_js_1._connectToCDPBrowser)(options);\n  }\n}\nexports.Puppeteer = Puppeteer;","map":{"version":3,"mappings":";;;;;;AAgBA;AAKA;AAyBA;;;;;;;;;AASA,MAAaA,SAAS;EA4DpB;;;EAGAC,YAAYC,QAAiC;IAR7C;;;IAGU,oBAAe,GAAG,KAAK;IAM/B,IAAI,CAACC,gBAAgB,GAAGD,QAAQ,CAACE,eAAe;IAEhD,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EACxC;EAlEA;;;;;;;;;;;;;;;;;;;;;;EAsBA,OAAOC,0BAA0B,CAC/BC,IAAY,EACZC,YAAgC;IAEhC,OAAO,gDAA0B,EAACD,IAAI,EAAEC,YAAY,CAAC;EACvD;EAEA;;;EAGA,OAAOC,4BAA4B,CAACF,IAAY;IAC9C,OAAO,kDAA4B,EAACA,IAAI,CAAC;EAC3C;EAEA;;;EAGA,OAAOG,uBAAuB;IAC5B,OAAO,6CAAuB,GAAE;EAClC;EAEA;;;EAGA,OAAOC,wBAAwB;IAC7B,OAAO,8CAAwB,GAAE;EACnC;EAoBA;;;;;;;;EAQAP,OAAO,CAACQ,OAAuB;IAC7B,OAAO,8CAAoB,EAACA,OAAO,CAAC;EACtC;;AA/EFC","names":["Puppeteer","constructor","settings","_isPuppeteerCore","isPuppeteerCore","connect","bind","registerCustomQueryHandler","name","queryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers","options","exports"],"sources":["../../../../src/common/Puppeteer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}