{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExecutionContext_instances, _ExecutionContext_evaluate;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExecutionContext = exports.EVALUATION_SCRIPT_URL = void 0;\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\nconst LazyArg_js_1 = require(\"./LazyArg.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @public\n */\nexports.EVALUATION_SCRIPT_URL = 'pptr://__puppeteer_evaluation_script__';\nconst SOURCE_URL_REGEX = /^[\\040\\t]*\\/\\/[@#] sourceURL=\\s*(\\S*?)\\s*$/m;\n/**\n * Represents a context for JavaScript execution.\n *\n * @example\n * A {@link Page} can have several execution contexts:\n *\n * - Each {@link Frame} of a {@link Page | page} has a \"default\" execution\n *   context that is always created after frame is attached to DOM. This context\n *   is returned by the {@link Frame.executionContext} method.\n * - Each {@link https://developer.chrome.com/extensions | Chrome extensions}\n *   creates additional execution contexts to isolate their code.\n *\n * @remarks\n * By definition, each context is isolated from one another, however they are\n * all able to manipulate non-JavaScript resources (such as DOM).\n *\n * @remarks\n * Besides pages, execution contexts can be found in\n * {@link WebWorker | workers}.\n *\n * @internal\n */\nclass ExecutionContext {\n  /**\n   * @internal\n   */\n  constructor(client, contextPayload, world) {\n    _ExecutionContext_instances.add(this);\n    this._client = client;\n    this._world = world;\n    this._contextId = contextPayload.id;\n    this._contextName = contextPayload.name;\n  }\n  /**\n   * Evaluates the given function.\n   *\n   * @example\n   *\n   * ```ts\n   * const executionContext = await page.mainFrame().executionContext();\n   * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function:\n   *\n   * ```ts\n   * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const oneHandle = await executionContext.evaluateHandle(() => 1);\n   * const twoHandle = await executionContext.evaluateHandle(() => 2);\n   * const result = await executionContext.evaluate(\n   *   (a, b) => a + b,\n   *   oneHandle,\n   *   twoHandle\n   * );\n   * await oneHandle.dispose();\n   * await twoHandle.dispose();\n   * console.log(result); // prints '3'.\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns The result of evaluating the function. If the result is an object,\n   * a vanilla object containing the serializable properties of the result is\n   * returned.\n   */\n  async evaluate(pageFunction) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return await __classPrivateFieldGet(this, _ExecutionContext_instances, \"m\", _ExecutionContext_evaluate).call(this, true, pageFunction, ...args);\n  }\n  /**\n   * Evaluates the given function.\n   *\n   * Unlike {@link ExecutionContext.evaluate | evaluate}, this method returns a\n   * handle to the result of the function.\n   *\n   * This method may be better suited if the object cannot be serialized (e.g.\n   * `Map`) and requires further manipulation.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = await page.mainFrame().executionContext();\n   * const handle: JSHandle<typeof globalThis> = await context.evaluateHandle(\n   *   () => Promise.resolve(self)\n   * );\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function.\n   *\n   * ```ts\n   * const handle: JSHandle<number> = await context.evaluateHandle('1 + 2');\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const bodyHandle: ElementHandle<HTMLBodyElement> =\n   *   await context.evaluateHandle(() => {\n   *     return document.body;\n   *   });\n   * const stringHandle: JSHandle<string> = await context.evaluateHandle(\n   *   body => body.innerHTML,\n   *   body\n   * );\n   * console.log(await stringHandle.jsonValue()); // prints body's innerHTML\n   * // Always dispose your garbage! :)\n   * await bodyHandle.dispose();\n   * await stringHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns A {@link JSHandle | handle} to the result of evaluating the\n   * function. If the result is a `Node`, then this will return an\n   * {@link ElementHandle | element handle}.\n   */\n  async evaluateHandle(pageFunction) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return __classPrivateFieldGet(this, _ExecutionContext_instances, \"m\", _ExecutionContext_evaluate).call(this, false, pageFunction, ...args);\n  }\n}\nexports.ExecutionContext = ExecutionContext;\n_ExecutionContext_instances = new WeakSet(), _ExecutionContext_evaluate = async function _ExecutionContext_evaluate(returnByValue, pageFunction) {\n  const suffix = `//# sourceURL=${exports.EVALUATION_SCRIPT_URL}`;\n  if ((0, util_js_1.isString)(pageFunction)) {\n    const contextId = this._contextId;\n    const expression = pageFunction;\n    const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression) ? expression : expression + '\\n' + suffix;\n    const {\n      exceptionDetails,\n      result: remoteObject\n    } = await this._client.send('Runtime.evaluate', {\n      expression: expressionWithSourceUrl,\n      contextId,\n      returnByValue,\n      awaitPromise: true,\n      userGesture: true\n    }).catch(rewriteError);\n    if (exceptionDetails) {\n      throw new Error('Evaluation failed: ' + (0, util_js_1.getExceptionMessage)(exceptionDetails));\n    }\n    return returnByValue ? (0, util_js_1.valueFromRemoteObject)(remoteObject) : (0, util_js_1.createJSHandle)(this, remoteObject);\n  }\n  let functionText = pageFunction.toString();\n  try {\n    new Function('(' + functionText + ')');\n  } catch (error) {\n    // This means we might have a function shorthand. Try another\n    // time prefixing 'function '.\n    if (functionText.startsWith('async ')) {\n      functionText = 'async function ' + functionText.substring('async '.length);\n    } else {\n      functionText = 'function ' + functionText;\n    }\n    try {\n      new Function('(' + functionText + ')');\n    } catch (error) {\n      // We tried hard to serialize, but there's a weird beast here.\n      throw new Error('Passed function is not well-serializable!');\n    }\n  }\n  let callFunctionOnPromise;\n  try {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n    callFunctionOnPromise = this._client.send('Runtime.callFunctionOn', {\n      functionDeclaration: functionText + '\\n' + suffix + '\\n',\n      executionContextId: this._contextId,\n      arguments: await Promise.all(args.map(convertArgument.bind(this))),\n      returnByValue,\n      awaitPromise: true,\n      userGesture: true\n    });\n  } catch (error) {\n    if (error instanceof TypeError && error.message.startsWith('Converting circular structure to JSON')) {\n      error.message += ' Recursive objects are not allowed.';\n    }\n    throw error;\n  }\n  const {\n    exceptionDetails,\n    result: remoteObject\n  } = await callFunctionOnPromise.catch(rewriteError);\n  if (exceptionDetails) {\n    throw new Error('Evaluation failed: ' + (0, util_js_1.getExceptionMessage)(exceptionDetails));\n  }\n  return returnByValue ? (0, util_js_1.valueFromRemoteObject)(remoteObject) : (0, util_js_1.createJSHandle)(this, remoteObject);\n  async function convertArgument(arg) {\n    if (arg instanceof LazyArg_js_1.LazyArg) {\n      arg = await arg.get();\n    }\n    if (typeof arg === 'bigint') {\n      // eslint-disable-line valid-typeof\n      return {\n        unserializableValue: `${arg.toString()}n`\n      };\n    }\n    if (Object.is(arg, -0)) {\n      return {\n        unserializableValue: '-0'\n      };\n    }\n    if (Object.is(arg, Infinity)) {\n      return {\n        unserializableValue: 'Infinity'\n      };\n    }\n    if (Object.is(arg, -Infinity)) {\n      return {\n        unserializableValue: '-Infinity'\n      };\n    }\n    if (Object.is(arg, NaN)) {\n      return {\n        unserializableValue: 'NaN'\n      };\n    }\n    const objectHandle = arg && arg instanceof JSHandle_js_1.JSHandle ? arg : null;\n    if (objectHandle) {\n      if (objectHandle.executionContext() !== this) {\n        throw new Error('JSHandles can be evaluated only in the context they were created!');\n      }\n      if (objectHandle.disposed) {\n        throw new Error('JSHandle is disposed!');\n      }\n      if (objectHandle.remoteObject().unserializableValue) {\n        return {\n          unserializableValue: objectHandle.remoteObject().unserializableValue\n        };\n      }\n      if (!objectHandle.remoteObject().objectId) {\n        return {\n          value: objectHandle.remoteObject().value\n        };\n      }\n      return {\n        objectId: objectHandle.remoteObject().objectId\n      };\n    }\n    return {\n      value: arg\n    };\n  }\n};\nconst rewriteError = error => {\n  if (error.message.includes('Object reference chain is too long')) {\n    return {\n      result: {\n        type: 'undefined'\n      }\n    };\n  }\n  if (error.message.includes(\"Object couldn't be returned by value\")) {\n    return {\n      result: {\n        type: 'undefined'\n      }\n    };\n  }\n  if (error.message.endsWith('Cannot find context with specified id') || error.message.endsWith('Inspected target navigated or closed')) {\n    throw new Error('Execution context was destroyed, most likely because of a navigation.');\n  }\n  throw error;\n};","map":{"version":3,"mappings":"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","names":["exports","SOURCE_URL_REGEX","ExecutionContext","constructor","client","contextPayload","world","_client","_world","_contextId","id","_contextName","name","evaluate","pageFunction","args","__classPrivateFieldGet","evaluateHandle","_ExecutionContext_evaluate","returnByValue","suffix","contextId","expression","expressionWithSourceUrl","test","exceptionDetails","result","remoteObject","send","awaitPromise","userGesture","catch","rewriteError","Error","functionText","toString","Function","error","startsWith","substring","length","callFunctionOnPromise","functionDeclaration","executionContextId","arguments","Promise","all","map","convertArgument","bind","TypeError","message","arg","LazyArg_js_1","get","unserializableValue","Object","is","Infinity","NaN","objectHandle","JSHandle_js_1","executionContext","disposed","objectId","value","includes","type","endsWith"],"sources":["../../../../src/common/ExecutionContext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}