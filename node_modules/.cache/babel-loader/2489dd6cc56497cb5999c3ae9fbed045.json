{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Coverage_jsCoverage, _Coverage_cssCoverage, _JSCoverage_instances, _JSCoverage_client, _JSCoverage_enabled, _JSCoverage_scriptURLs, _JSCoverage_scriptSources, _JSCoverage_eventListeners, _JSCoverage_resetOnNavigation, _JSCoverage_reportAnonymousScripts, _JSCoverage_includeRawScriptCoverage, _JSCoverage_onExecutionContextsCleared, _JSCoverage_onScriptParsed, _CSSCoverage_instances, _CSSCoverage_client, _CSSCoverage_enabled, _CSSCoverage_stylesheetURLs, _CSSCoverage_stylesheetSources, _CSSCoverage_eventListeners, _CSSCoverage_resetOnNavigation, _CSSCoverage_onExecutionContextsCleared, _CSSCoverage_onStyleSheet;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSCoverage = exports.JSCoverage = exports.Coverage = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\nconst util_js_1 = require(\"./util.js\");\nconst ExecutionContext_js_1 = require(\"./ExecutionContext.js\");\nconst util_js_2 = require(\"./util.js\");\n/**\n * The Coverage class provides methods to gathers information about parts of\n * JavaScript and CSS that were used by the page.\n *\n * @remarks\n * To output coverage in a form consumable by {@link https://github.com/istanbuljs | Istanbul},\n * see {@link https://github.com/istanbuljs/puppeteer-to-istanbul | puppeteer-to-istanbul}.\n *\n * @example\n * An example of using JavaScript and CSS coverage to get percentage of initially\n * executed code:\n *\n * ```ts\n * // Enable both JavaScript and CSS coverage\n * await Promise.all([\n *   page.coverage.startJSCoverage(),\n *   page.coverage.startCSSCoverage(),\n * ]);\n * // Navigate to page\n * await page.goto('https://example.com');\n * // Disable both JavaScript and CSS coverage\n * const [jsCoverage, cssCoverage] = await Promise.all([\n *   page.coverage.stopJSCoverage(),\n *   page.coverage.stopCSSCoverage(),\n * ]);\n * let totalBytes = 0;\n * let usedBytes = 0;\n * const coverage = [...jsCoverage, ...cssCoverage];\n * for (const entry of coverage) {\n *   totalBytes += entry.text.length;\n *   for (const range of entry.ranges) usedBytes += range.end - range.start - 1;\n * }\n * console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);\n * ```\n *\n * @public\n */\nclass Coverage {\n  constructor(client) {\n    _Coverage_jsCoverage.set(this, void 0);\n    _Coverage_cssCoverage.set(this, void 0);\n    __classPrivateFieldSet(this, _Coverage_jsCoverage, new JSCoverage(client), \"f\");\n    __classPrivateFieldSet(this, _Coverage_cssCoverage, new CSSCoverage(client), \"f\");\n  }\n  /**\n   * @param options - Set of configurable options for coverage defaults to\n   * `resetOnNavigation : true, reportAnonymousScripts : false,`\n   * `includeRawScriptCoverage : false, useBlockCoverage : true`\n   * @returns Promise that resolves when coverage is started.\n   *\n   * @remarks\n   * Anonymous scripts are ones that don't have an associated url. These are\n   * scripts that are dynamically created on the page using `eval` or\n   * `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous\n   * scripts URL will start with `debugger://VM` (unless a magic //# sourceURL\n   * comment is present, in which case that will the be URL).\n   */\n  async startJSCoverage() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return await __classPrivateFieldGet(this, _Coverage_jsCoverage, \"f\").start(options);\n  }\n  /**\n   * @returns Promise that resolves to the array of coverage reports for\n   * all scripts.\n   *\n   * @remarks\n   * JavaScript Coverage doesn't include anonymous scripts by default.\n   * However, scripts with sourceURLs are reported.\n   */\n  async stopJSCoverage() {\n    return await __classPrivateFieldGet(this, _Coverage_jsCoverage, \"f\").stop();\n  }\n  /**\n   * @param options - Set of configurable options for coverage, defaults to\n   * `resetOnNavigation : true`\n   * @returns Promise that resolves when coverage is started.\n   */\n  async startCSSCoverage() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return await __classPrivateFieldGet(this, _Coverage_cssCoverage, \"f\").start(options);\n  }\n  /**\n   * @returns Promise that resolves to the array of coverage reports\n   * for all stylesheets.\n   * @remarks\n   * CSS Coverage doesn't include dynamically injected style tags\n   * without sourceURLs.\n   */\n  async stopCSSCoverage() {\n    return await __classPrivateFieldGet(this, _Coverage_cssCoverage, \"f\").stop();\n  }\n}\nexports.Coverage = Coverage;\n_Coverage_jsCoverage = new WeakMap(), _Coverage_cssCoverage = new WeakMap();\n/**\n * @public\n */\nclass JSCoverage {\n  constructor(client) {\n    _JSCoverage_instances.add(this);\n    _JSCoverage_client.set(this, void 0);\n    _JSCoverage_enabled.set(this, false);\n    _JSCoverage_scriptURLs.set(this, new Map());\n    _JSCoverage_scriptSources.set(this, new Map());\n    _JSCoverage_eventListeners.set(this, []);\n    _JSCoverage_resetOnNavigation.set(this, false);\n    _JSCoverage_reportAnonymousScripts.set(this, false);\n    _JSCoverage_includeRawScriptCoverage.set(this, false);\n    __classPrivateFieldSet(this, _JSCoverage_client, client, \"f\");\n  }\n  async start() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _JSCoverage_enabled, \"f\"), 'JSCoverage is already enabled');\n    const {\n      resetOnNavigation = true,\n      reportAnonymousScripts = false,\n      includeRawScriptCoverage = false,\n      useBlockCoverage = true\n    } = options;\n    __classPrivateFieldSet(this, _JSCoverage_resetOnNavigation, resetOnNavigation, \"f\");\n    __classPrivateFieldSet(this, _JSCoverage_reportAnonymousScripts, reportAnonymousScripts, \"f\");\n    __classPrivateFieldSet(this, _JSCoverage_includeRawScriptCoverage, includeRawScriptCoverage, \"f\");\n    __classPrivateFieldSet(this, _JSCoverage_enabled, true, \"f\");\n    __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").clear();\n    __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").clear();\n    __classPrivateFieldSet(this, _JSCoverage_eventListeners, [(0, util_js_1.addEventListener)(__classPrivateFieldGet(this, _JSCoverage_client, \"f\"), 'Debugger.scriptParsed', __classPrivateFieldGet(this, _JSCoverage_instances, \"m\", _JSCoverage_onScriptParsed).bind(this)), (0, util_js_1.addEventListener)(__classPrivateFieldGet(this, _JSCoverage_client, \"f\"), 'Runtime.executionContextsCleared', __classPrivateFieldGet(this, _JSCoverage_instances, \"m\", _JSCoverage_onExecutionContextsCleared).bind(this))], \"f\");\n    await Promise.all([__classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.enable'), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.startPreciseCoverage', {\n      callCount: __classPrivateFieldGet(this, _JSCoverage_includeRawScriptCoverage, \"f\"),\n      detailed: useBlockCoverage\n    }), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.enable'), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.setSkipAllPauses', {\n      skip: true\n    })]);\n  }\n  async stop() {\n    (0, assert_js_1.assert)(__classPrivateFieldGet(this, _JSCoverage_enabled, \"f\"), 'JSCoverage is not enabled');\n    __classPrivateFieldSet(this, _JSCoverage_enabled, false, \"f\");\n    const result = await Promise.all([__classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.takePreciseCoverage'), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.stopPreciseCoverage'), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.disable'), __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.disable')]);\n    (0, util_js_2.removeEventListeners)(__classPrivateFieldGet(this, _JSCoverage_eventListeners, \"f\"));\n    const coverage = [];\n    const profileResponse = result[0];\n    for (const entry of profileResponse.result) {\n      let url = __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").get(entry.scriptId);\n      if (!url && __classPrivateFieldGet(this, _JSCoverage_reportAnonymousScripts, \"f\")) {\n        url = 'debugger://VM' + entry.scriptId;\n      }\n      const text = __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").get(entry.scriptId);\n      if (text === undefined || url === undefined) {\n        continue;\n      }\n      const flattenRanges = [];\n      for (const func of entry.functions) {\n        flattenRanges.push(...func.ranges);\n      }\n      const ranges = convertToDisjointRanges(flattenRanges);\n      if (!__classPrivateFieldGet(this, _JSCoverage_includeRawScriptCoverage, \"f\")) {\n        coverage.push({\n          url,\n          ranges,\n          text\n        });\n      } else {\n        coverage.push({\n          url,\n          ranges,\n          text,\n          rawScriptCoverage: entry\n        });\n      }\n    }\n    return coverage;\n  }\n}\nexports.JSCoverage = JSCoverage;\n_JSCoverage_client = new WeakMap(), _JSCoverage_enabled = new WeakMap(), _JSCoverage_scriptURLs = new WeakMap(), _JSCoverage_scriptSources = new WeakMap(), _JSCoverage_eventListeners = new WeakMap(), _JSCoverage_resetOnNavigation = new WeakMap(), _JSCoverage_reportAnonymousScripts = new WeakMap(), _JSCoverage_includeRawScriptCoverage = new WeakMap(), _JSCoverage_instances = new WeakSet(), _JSCoverage_onExecutionContextsCleared = function _JSCoverage_onExecutionContextsCleared() {\n  if (!__classPrivateFieldGet(this, _JSCoverage_resetOnNavigation, \"f\")) {\n    return;\n  }\n  __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").clear();\n  __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").clear();\n}, _JSCoverage_onScriptParsed = async function _JSCoverage_onScriptParsed(event) {\n  // Ignore puppeteer-injected scripts\n  if (event.url === ExecutionContext_js_1.EVALUATION_SCRIPT_URL) {\n    return;\n  }\n  // Ignore other anonymous scripts unless the reportAnonymousScripts option is true.\n  if (!event.url && !__classPrivateFieldGet(this, _JSCoverage_reportAnonymousScripts, \"f\")) {\n    return;\n  }\n  try {\n    const response = await __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.getScriptSource', {\n      scriptId: event.scriptId\n    });\n    __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").set(event.scriptId, event.url);\n    __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").set(event.scriptId, response.scriptSource);\n  } catch (error) {\n    // This might happen if the page has already navigated away.\n    (0, util_js_1.debugError)(error);\n  }\n};\n/**\n * @public\n */\nclass CSSCoverage {\n  constructor(client) {\n    _CSSCoverage_instances.add(this);\n    _CSSCoverage_client.set(this, void 0);\n    _CSSCoverage_enabled.set(this, false);\n    _CSSCoverage_stylesheetURLs.set(this, new Map());\n    _CSSCoverage_stylesheetSources.set(this, new Map());\n    _CSSCoverage_eventListeners.set(this, []);\n    _CSSCoverage_resetOnNavigation.set(this, false);\n    __classPrivateFieldSet(this, _CSSCoverage_client, client, \"f\");\n  }\n  async start() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _CSSCoverage_enabled, \"f\"), 'CSSCoverage is already enabled');\n    const {\n      resetOnNavigation = true\n    } = options;\n    __classPrivateFieldSet(this, _CSSCoverage_resetOnNavigation, resetOnNavigation, \"f\");\n    __classPrivateFieldSet(this, _CSSCoverage_enabled, true, \"f\");\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").clear();\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").clear();\n    __classPrivateFieldSet(this, _CSSCoverage_eventListeners, [(0, util_js_1.addEventListener)(__classPrivateFieldGet(this, _CSSCoverage_client, \"f\"), 'CSS.styleSheetAdded', __classPrivateFieldGet(this, _CSSCoverage_instances, \"m\", _CSSCoverage_onStyleSheet).bind(this)), (0, util_js_1.addEventListener)(__classPrivateFieldGet(this, _CSSCoverage_client, \"f\"), 'Runtime.executionContextsCleared', __classPrivateFieldGet(this, _CSSCoverage_instances, \"m\", _CSSCoverage_onExecutionContextsCleared).bind(this))], \"f\");\n    await Promise.all([__classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('DOM.enable'), __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.enable'), __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.startRuleUsageTracking')]);\n  }\n  async stop() {\n    (0, assert_js_1.assert)(__classPrivateFieldGet(this, _CSSCoverage_enabled, \"f\"), 'CSSCoverage is not enabled');\n    __classPrivateFieldSet(this, _CSSCoverage_enabled, false, \"f\");\n    const ruleTrackingResponse = await __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.stopRuleUsageTracking');\n    await Promise.all([__classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.disable'), __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('DOM.disable')]);\n    (0, util_js_2.removeEventListeners)(__classPrivateFieldGet(this, _CSSCoverage_eventListeners, \"f\"));\n    // aggregate by styleSheetId\n    const styleSheetIdToCoverage = new Map();\n    for (const entry of ruleTrackingResponse.ruleUsage) {\n      let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);\n      if (!ranges) {\n        ranges = [];\n        styleSheetIdToCoverage.set(entry.styleSheetId, ranges);\n      }\n      ranges.push({\n        startOffset: entry.startOffset,\n        endOffset: entry.endOffset,\n        count: entry.used ? 1 : 0\n      });\n    }\n    const coverage = [];\n    for (const styleSheetId of __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").keys()) {\n      const url = __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").get(styleSheetId);\n      (0, assert_js_1.assert)(typeof url !== 'undefined', `Stylesheet URL is undefined (styleSheetId=${styleSheetId})`);\n      const text = __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").get(styleSheetId);\n      (0, assert_js_1.assert)(typeof text !== 'undefined', `Stylesheet text is undefined (styleSheetId=${styleSheetId})`);\n      const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);\n      coverage.push({\n        url,\n        ranges,\n        text\n      });\n    }\n    return coverage;\n  }\n}\nexports.CSSCoverage = CSSCoverage;\n_CSSCoverage_client = new WeakMap(), _CSSCoverage_enabled = new WeakMap(), _CSSCoverage_stylesheetURLs = new WeakMap(), _CSSCoverage_stylesheetSources = new WeakMap(), _CSSCoverage_eventListeners = new WeakMap(), _CSSCoverage_resetOnNavigation = new WeakMap(), _CSSCoverage_instances = new WeakSet(), _CSSCoverage_onExecutionContextsCleared = function _CSSCoverage_onExecutionContextsCleared() {\n  if (!__classPrivateFieldGet(this, _CSSCoverage_resetOnNavigation, \"f\")) {\n    return;\n  }\n  __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").clear();\n  __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").clear();\n}, _CSSCoverage_onStyleSheet = async function _CSSCoverage_onStyleSheet(event) {\n  const header = event.header;\n  // Ignore anonymous scripts\n  if (!header.sourceURL) {\n    return;\n  }\n  try {\n    const response = await __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.getStyleSheetText', {\n      styleSheetId: header.styleSheetId\n    });\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").set(header.styleSheetId, header.sourceURL);\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").set(header.styleSheetId, response.text);\n  } catch (error) {\n    // This might happen if the page has already navigated away.\n    (0, util_js_1.debugError)(error);\n  }\n};\nfunction convertToDisjointRanges(nestedRanges) {\n  const points = [];\n  for (const range of nestedRanges) {\n    points.push({\n      offset: range.startOffset,\n      type: 0,\n      range\n    });\n    points.push({\n      offset: range.endOffset,\n      type: 1,\n      range\n    });\n  }\n  // Sort points to form a valid parenthesis sequence.\n  points.sort((a, b) => {\n    // Sort with increasing offsets.\n    if (a.offset !== b.offset) {\n      return a.offset - b.offset;\n    }\n    // All \"end\" points should go before \"start\" points.\n    if (a.type !== b.type) {\n      return b.type - a.type;\n    }\n    const aLength = a.range.endOffset - a.range.startOffset;\n    const bLength = b.range.endOffset - b.range.startOffset;\n    // For two \"start\" points, the one with longer range goes first.\n    if (a.type === 0) {\n      return bLength - aLength;\n    }\n    // For two \"end\" points, the one with shorter range goes first.\n    return aLength - bLength;\n  });\n  const hitCountStack = [];\n  const results = [];\n  let lastOffset = 0;\n  // Run scanning line to intersect all ranges.\n  for (const point of points) {\n    if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {\n      const lastResult = results[results.length - 1];\n      if (lastResult && lastResult.end === lastOffset) {\n        lastResult.end = point.offset;\n      } else {\n        results.push({\n          start: lastOffset,\n          end: point.offset\n        });\n      }\n    }\n    lastOffset = point.offset;\n    if (point.type === 0) {\n      hitCountStack.push(point.range.count);\n    } else {\n      hitCountStack.pop();\n    }\n  }\n  // Filter out empty ranges.\n  return results.filter(range => {\n    return range.end - range.start > 0;\n  });\n}","map":{"version":3,"mappings":"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","names":["Coverage","constructor","client","_Coverage_jsCoverage","_Coverage_cssCoverage","__classPrivateFieldSet","JSCoverage","CSSCoverage","startJSCoverage","options","__classPrivateFieldGet","start","stopJSCoverage","stop","startCSSCoverage","stopCSSCoverage","exports","_JSCoverage_client","_JSCoverage_enabled","_JSCoverage_scriptURLs","Map","_JSCoverage_scriptSources","_JSCoverage_eventListeners","_JSCoverage_resetOnNavigation","_JSCoverage_reportAnonymousScripts","_JSCoverage_includeRawScriptCoverage","resetOnNavigation","reportAnonymousScripts","includeRawScriptCoverage","useBlockCoverage","clear","bind","Promise","all","send","callCount","detailed","skip","result","coverage","profileResponse","entry","url","get","scriptId","text","undefined","flattenRanges","func","functions","push","ranges","convertToDisjointRanges","rawScriptCoverage","_JSCoverage_onScriptParsed","event","ExecutionContext_js_1","response","set","scriptSource","error","_CSSCoverage_client","_CSSCoverage_enabled","_CSSCoverage_stylesheetURLs","_CSSCoverage_stylesheetSources","_CSSCoverage_eventListeners","_CSSCoverage_resetOnNavigation","ruleTrackingResponse","styleSheetIdToCoverage","ruleUsage","styleSheetId","startOffset","endOffset","count","used","keys","_CSSCoverage_onStyleSheet","header","sourceURL","nestedRanges","points","range","offset","type","sort","a","b","aLength","bLength","hitCountStack","results","lastOffset","point","length","lastResult","end","pop","filter"],"sources":["../../../../src/common/Coverage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}