{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CDPBrowser_instances, _CDPBrowser_ignoreHTTPSErrors, _CDPBrowser_defaultViewport, _CDPBrowser_process, _CDPBrowser_connection, _CDPBrowser_closeCallback, _CDPBrowser_targetFilterCallback, _CDPBrowser_isPageTargetCallback, _CDPBrowser_defaultContext, _CDPBrowser_contexts, _CDPBrowser_screenshotTaskQueue, _CDPBrowser_targetManager, _CDPBrowser_emitDisconnected, _CDPBrowser_setIsPageTargetCallback, _CDPBrowser_createTarget, _CDPBrowser_onAttachedToTarget, _CDPBrowser_onDetachedFromTarget, _CDPBrowser_onTargetChanged, _CDPBrowser_onTargetDiscovered, _CDPBrowser_getVersion, _CDPBrowserContext_connection, _CDPBrowserContext_browser, _CDPBrowserContext_id;\nimport { assert } from '../util/assert.js';\nimport { ConnectionEmittedEvents } from './Connection.js';\nimport { waitWithTimeout } from './util.js';\nimport { Target } from './Target.js';\nimport { TaskQueue } from './TaskQueue.js';\nimport { ChromeTargetManager } from './ChromeTargetManager.js';\nimport { FirefoxTargetManager } from './FirefoxTargetManager.js';\nimport { Browser as BrowserBase, BrowserContext, WEB_PERMISSION_TO_PROTOCOL_PERMISSION } from '../api/Browser.js';\n/**\n * @internal\n */\nexport class CDPBrowser extends BrowserBase {\n  /**\n   * @internal\n   */\n  constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    super();\n    _CDPBrowser_instances.add(this);\n    _CDPBrowser_ignoreHTTPSErrors.set(this, void 0);\n    _CDPBrowser_defaultViewport.set(this, void 0);\n    _CDPBrowser_process.set(this, void 0);\n    _CDPBrowser_connection.set(this, void 0);\n    _CDPBrowser_closeCallback.set(this, void 0);\n    _CDPBrowser_targetFilterCallback.set(this, void 0);\n    _CDPBrowser_isPageTargetCallback.set(this, void 0);\n    _CDPBrowser_defaultContext.set(this, void 0);\n    _CDPBrowser_contexts.set(this, void 0);\n    _CDPBrowser_screenshotTaskQueue.set(this, void 0);\n    _CDPBrowser_targetManager.set(this, void 0);\n    _CDPBrowser_emitDisconnected.set(this, () => {\n      this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n    });\n\n    _CDPBrowser_createTarget.set(this, (targetInfo, session) => {\n      var _a;\n      const {\n        browserContextId\n      } = targetInfo;\n      const context = browserContextId && __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").has(browserContextId) ? __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").get(browserContextId) : __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n      if (!context) {\n        throw new Error('Missing browser context');\n      }\n      return new Target(targetInfo, session, context, __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\"), isAutoAttachEmulated => {\n        return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._createSession(targetInfo, isAutoAttachEmulated);\n      }, __classPrivateFieldGet(this, _CDPBrowser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _CDPBrowser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _CDPBrowser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\"));\n    });\n    _CDPBrowser_onAttachedToTarget.set(this, async target => {\n      if (await target._initializedPromise) {\n        this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n        target.browserContext().emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n      }\n    });\n    _CDPBrowser_onDetachedFromTarget.set(this, async target => {\n      target._initializedCallback(false);\n      target._closedCallback();\n      if (await target._initializedPromise) {\n        this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n        target.browserContext().emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n      }\n    });\n    _CDPBrowser_onTargetChanged.set(this, _ref => {\n      let {\n        target,\n        targetInfo\n      } = _ref;\n      const previousURL = target.url();\n      const wasInitialized = target._isInitialized;\n      target._targetInfoChanged(targetInfo);\n      if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n        target.browserContext().emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n      }\n    });\n    _CDPBrowser_onTargetDiscovered.set(this, targetInfo => {\n      this.emit('targetdiscovered', targetInfo);\n    });\n    product = product || 'chrome';\n    __classPrivateFieldSet(this, _CDPBrowser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_defaultViewport, defaultViewport, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_process, process, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_screenshotTaskQueue, new TaskQueue(), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_closeCallback, closeCallback || function () {}, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_targetFilterCallback, targetFilterCallback || (() => {\n      return true;\n    }), \"f\");\n    __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n    if (product === 'firefox') {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new FirefoxTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new ChromeTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    }\n    __classPrivateFieldSet(this, _CDPBrowser_defaultContext, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_contexts, new Map(), \"f\");\n    for (const contextId of contextIds) {\n      __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(contextId, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, contextId));\n    }\n  }\n  /**\n   * @internal\n   */\n  static async _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    const browser = new CDPBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n    await browser._attach();\n    return browser;\n  }\n  /**\n   * @internal\n   */\n  get _targets() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets();\n  }\n  /**\n   * @internal\n   */\n  async _attach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").on(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n    await __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").initialize();\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").off(ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n  }\n  /**\n   * The spawned browser process. Returns `null` if the browser instance was created with\n   * {@link Puppeteer.connect}.\n   */\n  process() {\n    var _a;\n    return (_a = __classPrivateFieldGet(this, _CDPBrowser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * @internal\n   */\n  _targetManager() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _getIsPageTargetCallback() {\n    return __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\");\n  }\n  /**\n   * Creates a new incognito browser context. This won't share cookies/cache with other\n   * browser contexts.\n   *\n   * @example\n   *\n   * ```ts\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   // Create a new incognito browser context.\n   *   const context = await browser.createIncognitoBrowserContext();\n   *   // Create a new page in a pristine context.\n   *   const page = await context.newPage();\n   *   // Do stuff\n   *   await page.goto('https://example.com');\n   * })();\n   * ```\n   */\n  async createIncognitoBrowserContext() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      proxyServer,\n      proxyBypassList\n    } = options;\n    const {\n      browserContextId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createBrowserContext', {\n      proxyServer,\n      proxyBypassList: proxyBypassList && proxyBypassList.join(',')\n    });\n    const context = new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, browserContextId);\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(browserContextId, context);\n    return context;\n  }\n  /**\n   * Returns an array of all open browser contexts. In a newly created browser, this will\n   * return a single instance of {@link BrowserContext}.\n   */\n  browserContexts() {\n    return [__classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").values())];\n  }\n  /**\n   * Returns the default browser context. The default browser context cannot be closed.\n   */\n  defaultBrowserContext() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n  }\n  /**\n   * @internal\n   */\n  async _disposeContext(contextId) {\n    if (!contextId) {\n      return;\n    }\n    await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.disposeBrowserContext', {\n      browserContextId: contextId\n    });\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").delete(contextId);\n  }\n  /**\n   * The browser websocket endpoint which can be used as an argument to\n   * {@link Puppeteer.connect}.\n   *\n   * @returns The Browser websocket url.\n   *\n   * @remarks\n   *\n   * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n   *\n   * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n   * Learn more about the\n   * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n   * the {@link\n   * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n   * | browser endpoint}.\n   */\n  wsEndpoint() {\n    return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").url();\n  }\n  /**\n   * Promise which resolves to a new {@link Page} object. The Page is created in\n   * a default browser context.\n   */\n  async newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\").newPage();\n  }\n  /**\n   * @internal\n   */\n  async _createPageInContext(contextId) {\n    const {\n      targetId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createTarget', {\n      url: 'about:blank',\n      browserContextId: contextId || undefined\n    });\n    const target = __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().get(targetId);\n    if (!target) {\n      throw new Error(`Missing target for page (id = ${targetId})`);\n    }\n    const initialized = await target._initializedPromise;\n    if (!initialized) {\n      throw new Error(`Failed to create target for page (id = ${targetId})`);\n    }\n    const page = await target.page();\n    if (!page) {\n      throw new Error(`Failed to create a page for context (id = ${contextId})`);\n    }\n    return page;\n  }\n  /**\n   * All active targets inside the Browser. In case of multiple browser contexts, returns\n   * an array with all the targets in all browser contexts.\n   */\n  targets() {\n    return Array.from(__classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().values()).filter(target => {\n      return target._isInitialized;\n    });\n  }\n  /**\n   * The target associated with the browser.\n   */\n  target() {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n  /**\n   * Searches for a target in all browser contexts.\n   *\n   * @param predicate - A function to be run for every target.\n   * @returns The first target found that matches the `predicate` function.\n   *\n   * @example\n   *\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browser.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  async waitForTarget(predicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      timeout = 30000\n    } = options;\n    let resolve;\n    let isResolved = false;\n    const targetPromise = new Promise(x => {\n      return resolve = x;\n    });\n    this.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n    this.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    try {\n      this.targets().forEach(check);\n      if (!timeout) {\n        return await targetPromise;\n      }\n      return await waitWithTimeout(targetPromise, 'target', timeout);\n    } finally {\n      this.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n      this.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    }\n    async function check(target) {\n      if ((await predicate(target)) && !isResolved) {\n        isResolved = true;\n        resolve(target);\n      }\n    }\n  }\n  /**\n   * An array of all open pages inside the Browser.\n   *\n   * @remarks\n   *\n   * In case of multiple browser contexts, returns an array with all the pages in all\n   * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n   * here. You can find them using {@link Target.page}.\n   */\n  async pages() {\n    const contextPages = await Promise.all(this.browserContexts().map(context => {\n      return context.pages();\n    }));\n    // Flatten array.\n    return contextPages.reduce((acc, x) => {\n      return acc.concat(x);\n    }, []);\n  }\n  /**\n   * A string representing the browser name and version.\n   *\n   * @remarks\n   *\n   * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n   * non-headless, this is similar to `Chrome/61.0.3153.0`.\n   *\n   * The format of browser.version() might change with future releases of Chromium.\n   */\n  async version() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.product;\n  }\n  /**\n   * The browser's original user agent. Pages can override the browser user agent with\n   * {@link Page.setUserAgent}.\n   */\n  async userAgent() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.userAgent;\n  }\n  /**\n   * Closes Chromium and all of its pages (if any were opened). The\n   * {@link CDPBrowser} object itself is considered to be disposed and cannot be\n   * used anymore.\n   */\n  async close() {\n    await __classPrivateFieldGet(this, _CDPBrowser_closeCallback, \"f\").call(null);\n    this.disconnect();\n  }\n  /**\n   * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n   * After calling `disconnect`, the {@link CDPBrowser} object is considered disposed and\n   * cannot be used anymore.\n   */\n  disconnect() {\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").dispose();\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").dispose();\n  }\n  /**\n   * Indicates that the browser is connected.\n   */\n  isConnected() {\n    return !__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._closed;\n  }\n}\n_CDPBrowser_ignoreHTTPSErrors = new WeakMap(), _CDPBrowser_defaultViewport = new WeakMap(), _CDPBrowser_process = new WeakMap(), _CDPBrowser_connection = new WeakMap(), _CDPBrowser_closeCallback = new WeakMap(), _CDPBrowser_targetFilterCallback = new WeakMap(), _CDPBrowser_isPageTargetCallback = new WeakMap(), _CDPBrowser_defaultContext = new WeakMap(), _CDPBrowser_contexts = new WeakMap(), _CDPBrowser_screenshotTaskQueue = new WeakMap(), _CDPBrowser_targetManager = new WeakMap(), _CDPBrowser_emitDisconnected = new WeakMap(), _CDPBrowser_createTarget = new WeakMap(), _CDPBrowser_onAttachedToTarget = new WeakMap(), _CDPBrowser_onDetachedFromTarget = new WeakMap(), _CDPBrowser_onTargetChanged = new WeakMap(), _CDPBrowser_onTargetDiscovered = new WeakMap(), _CDPBrowser_instances = new WeakSet(), _CDPBrowser_setIsPageTargetCallback = function _CDPBrowser_setIsPageTargetCallback(isPageTargetCallback) {\n  __classPrivateFieldSet(this, _CDPBrowser_isPageTargetCallback, isPageTargetCallback || (target => {\n    return target.type === 'page' || target.type === 'background_page' || target.type === 'webview';\n  }), \"f\");\n}, _CDPBrowser_getVersion = function _CDPBrowser_getVersion() {\n  return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * @internal\n */\nexport class CDPBrowserContext extends BrowserContext {\n  /**\n   * @internal\n   */\n  constructor(connection, browser, contextId) {\n    super();\n    _CDPBrowserContext_connection.set(this, void 0);\n    _CDPBrowserContext_browser.set(this, void 0);\n    _CDPBrowserContext_id.set(this, void 0);\n    __classPrivateFieldSet(this, _CDPBrowserContext_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_browser, browser, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_id, contextId, \"f\");\n  }\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  /**\n   * This searches for a target in this specific browser context.\n   *\n   * @example\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   *\n   * @param predicate - A function to be run for every target\n   * @param options - An object of options. Accepts a timout,\n   * which is the maximum wait time in milliseconds.\n   * Pass `0` to disable the timeout. Defaults to 30 seconds.\n   * @returns Promise which resolves to the first target found\n   * that matches the `predicate` function.\n   */\n  waitForTarget(predicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  async pages() {\n    const pages = await Promise.all(this.targets().filter(target => {\n      var _a;\n      return target.type() === 'page' || target.type() === 'other' && ((_a = __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()));\n    }).map(target => {\n      return target.page();\n    }));\n    return pages.filter(page => {\n      return !!page;\n    });\n  }\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito() {\n    return !!__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n   * @param permissions - An array of permissions to grant.\n   * All permissions that are not listed here will be automatically denied.\n   */\n  async overridePermissions(origin, permissions) {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission = WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n      origin,\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined,\n      permissions: protocolPermissions\n    });\n  }\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  async clearPermissionOverrides() {\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined\n    });\n  }\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\");\n  }\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  async close() {\n    assert(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n    await __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n}\n_CDPBrowserContext_connection = new WeakMap(), _CDPBrowserContext_browser = new WeakMap(), _CDPBrowserContext_id = new WeakMap();","map":{"version":3,"mappings":"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","names":["assert","ConnectionEmittedEvents","waitWithTimeout","Target","TaskQueue","ChromeTargetManager","FirefoxTargetManager","Browser","BrowserBase","BrowserContext","WEB_PERMISSION_TO_PROTOCOL_PERMISSION","CDPBrowser","constructor","product","connection","contextIds","ignoreHTTPSErrors","defaultViewport","process","closeCallback","targetFilterCallback","isPageTargetCallback","_CDPBrowser_ignoreHTTPSErrors","_CDPBrowser_defaultViewport","_CDPBrowser_process","_CDPBrowser_connection","_CDPBrowser_closeCallback","_CDPBrowser_targetFilterCallback","_CDPBrowser_isPageTargetCallback","_CDPBrowser_defaultContext","_CDPBrowser_contexts","_CDPBrowser_screenshotTaskQueue","_CDPBrowser_targetManager","_CDPBrowser_emitDisconnected","emit","_CDPBrowser_createTarget","targetInfo","session","browserContextId","context","__classPrivateFieldGet","has","get","Error","isAutoAttachEmulated","_createSession","_CDPBrowser_onAttachedToTarget","target","_initializedPromise","browserContext","_CDPBrowser_onDetachedFromTarget","_initializedCallback","_closedCallback","_CDPBrowser_onTargetChanged","previousURL","url","wasInitialized","_isInitialized","_targetInfoChanged","_CDPBrowser_onTargetDiscovered","__classPrivateFieldSet","CDPBrowserContext","Map","contextId","set","_create","browser","_attach","_targets","getAvailableTargets","on","Disconnected","initialize","_detach","off","_targetManager","_getIsPageTargetCallback","createIncognitoBrowserContext","options","proxyServer","proxyBypassList","send","join","browserContexts","Array","from","values","defaultBrowserContext","_disposeContext","delete","wsEndpoint","newPage","_createPageInContext","targetId","undefined","initialized","page","targets","filter","browserTarget","find","type","waitForTarget","predicate","timeout","resolve","isResolved","targetPromise","Promise","x","check","forEach","pages","contextPages","all","map","reduce","acc","concat","version","userAgent","close","call","disconnect","dispose","isConnected","_closed","_CDPBrowserContext_connection","_CDPBrowserContext_browser","_CDPBrowserContext_id","_getTargetInfo","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","clearPermissionOverrides"],"sources":["../../../../src/common/Browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}