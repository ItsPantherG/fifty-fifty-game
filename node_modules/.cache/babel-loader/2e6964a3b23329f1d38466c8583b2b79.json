{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CDPBrowser_instances, _CDPBrowser_ignoreHTTPSErrors, _CDPBrowser_defaultViewport, _CDPBrowser_process, _CDPBrowser_connection, _CDPBrowser_closeCallback, _CDPBrowser_targetFilterCallback, _CDPBrowser_isPageTargetCallback, _CDPBrowser_defaultContext, _CDPBrowser_contexts, _CDPBrowser_screenshotTaskQueue, _CDPBrowser_targetManager, _CDPBrowser_emitDisconnected, _CDPBrowser_setIsPageTargetCallback, _CDPBrowser_createTarget, _CDPBrowser_onAttachedToTarget, _CDPBrowser_onDetachedFromTarget, _CDPBrowser_onTargetChanged, _CDPBrowser_onTargetDiscovered, _CDPBrowser_getVersion, _CDPBrowserContext_connection, _CDPBrowserContext_browser, _CDPBrowserContext_id;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CDPBrowserContext = exports.CDPBrowser = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst util_js_1 = require(\"./util.js\");\nconst Target_js_1 = require(\"./Target.js\");\nconst TaskQueue_js_1 = require(\"./TaskQueue.js\");\nconst ChromeTargetManager_js_1 = require(\"./ChromeTargetManager.js\");\nconst FirefoxTargetManager_js_1 = require(\"./FirefoxTargetManager.js\");\nconst Browser_js_1 = require(\"../api/Browser.js\");\n/**\n * @internal\n */\nclass CDPBrowser extends Browser_js_1.Browser {\n  /**\n   * @internal\n   */\n  constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    super();\n    _CDPBrowser_instances.add(this);\n    _CDPBrowser_ignoreHTTPSErrors.set(this, void 0);\n    _CDPBrowser_defaultViewport.set(this, void 0);\n    _CDPBrowser_process.set(this, void 0);\n    _CDPBrowser_connection.set(this, void 0);\n    _CDPBrowser_closeCallback.set(this, void 0);\n    _CDPBrowser_targetFilterCallback.set(this, void 0);\n    _CDPBrowser_isPageTargetCallback.set(this, void 0);\n    _CDPBrowser_defaultContext.set(this, void 0);\n    _CDPBrowser_contexts.set(this, void 0);\n    _CDPBrowser_screenshotTaskQueue.set(this, void 0);\n    _CDPBrowser_targetManager.set(this, void 0);\n    _CDPBrowser_emitDisconnected.set(this, () => {\n      this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n    });\n\n    _CDPBrowser_createTarget.set(this, (targetInfo, session) => {\n      var _a;\n      const {\n        browserContextId\n      } = targetInfo;\n      const context = browserContextId && __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").has(browserContextId) ? __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").get(browserContextId) : __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n      if (!context) {\n        throw new Error('Missing browser context');\n      }\n      return new Target_js_1.Target(targetInfo, session, context, __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\"), isAutoAttachEmulated => {\n        return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._createSession(targetInfo, isAutoAttachEmulated);\n      }, __classPrivateFieldGet(this, _CDPBrowser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _CDPBrowser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _CDPBrowser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\"));\n    });\n    _CDPBrowser_onAttachedToTarget.set(this, async target => {\n      if (await target._initializedPromise) {\n        this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n        target.browserContext().emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n      }\n    });\n    _CDPBrowser_onDetachedFromTarget.set(this, async target => {\n      target._initializedCallback(false);\n      target._closedCallback();\n      if (await target._initializedPromise) {\n        this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n        target.browserContext().emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n      }\n    });\n    _CDPBrowser_onTargetChanged.set(this, _ref => {\n      let {\n        target,\n        targetInfo\n      } = _ref;\n      const previousURL = target.url();\n      const wasInitialized = target._isInitialized;\n      target._targetInfoChanged(targetInfo);\n      if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n        target.browserContext().emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n      }\n    });\n    _CDPBrowser_onTargetDiscovered.set(this, targetInfo => {\n      this.emit('targetdiscovered', targetInfo);\n    });\n    product = product || 'chrome';\n    __classPrivateFieldSet(this, _CDPBrowser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_defaultViewport, defaultViewport, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_process, process, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_screenshotTaskQueue, new TaskQueue_js_1.TaskQueue(), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_closeCallback, closeCallback || function () {}, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_targetFilterCallback, targetFilterCallback || (() => {\n      return true;\n    }), \"f\");\n    __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n    if (product === 'firefox') {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new FirefoxTargetManager_js_1.FirefoxTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new ChromeTargetManager_js_1.ChromeTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    }\n    __classPrivateFieldSet(this, _CDPBrowser_defaultContext, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_contexts, new Map(), \"f\");\n    for (const contextId of contextIds) {\n      __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(contextId, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, contextId));\n    }\n  }\n  /**\n   * @internal\n   */\n  static async _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    const browser = new CDPBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n    await browser._attach();\n    return browser;\n  }\n  /**\n   * @internal\n   */\n  get _targets() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets();\n  }\n  /**\n   * @internal\n   */\n  async _attach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").on(Connection_js_1.ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n    await __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").initialize();\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").off(Connection_js_1.ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n  }\n  /**\n   * The spawned browser process. Returns `null` if the browser instance was created with\n   * {@link Puppeteer.connect}.\n   */\n  process() {\n    var _a;\n    return (_a = __classPrivateFieldGet(this, _CDPBrowser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * @internal\n   */\n  _targetManager() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _getIsPageTargetCallback() {\n    return __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\");\n  }\n  /**\n   * Creates a new incognito browser context. This won't share cookies/cache with other\n   * browser contexts.\n   *\n   * @example\n   *\n   * ```ts\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   // Create a new incognito browser context.\n   *   const context = await browser.createIncognitoBrowserContext();\n   *   // Create a new page in a pristine context.\n   *   const page = await context.newPage();\n   *   // Do stuff\n   *   await page.goto('https://example.com');\n   * })();\n   * ```\n   */\n  async createIncognitoBrowserContext() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      proxyServer,\n      proxyBypassList\n    } = options;\n    const {\n      browserContextId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createBrowserContext', {\n      proxyServer,\n      proxyBypassList: proxyBypassList && proxyBypassList.join(',')\n    });\n    const context = new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, browserContextId);\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(browserContextId, context);\n    return context;\n  }\n  /**\n   * Returns an array of all open browser contexts. In a newly created browser, this will\n   * return a single instance of {@link BrowserContext}.\n   */\n  browserContexts() {\n    return [__classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").values())];\n  }\n  /**\n   * Returns the default browser context. The default browser context cannot be closed.\n   */\n  defaultBrowserContext() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n  }\n  /**\n   * @internal\n   */\n  async _disposeContext(contextId) {\n    if (!contextId) {\n      return;\n    }\n    await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.disposeBrowserContext', {\n      browserContextId: contextId\n    });\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").delete(contextId);\n  }\n  /**\n   * The browser websocket endpoint which can be used as an argument to\n   * {@link Puppeteer.connect}.\n   *\n   * @returns The Browser websocket url.\n   *\n   * @remarks\n   *\n   * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n   *\n   * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n   * Learn more about the\n   * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n   * the {@link\n   * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n   * | browser endpoint}.\n   */\n  wsEndpoint() {\n    return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").url();\n  }\n  /**\n   * Promise which resolves to a new {@link Page} object. The Page is created in\n   * a default browser context.\n   */\n  async newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\").newPage();\n  }\n  /**\n   * @internal\n   */\n  async _createPageInContext(contextId) {\n    const {\n      targetId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createTarget', {\n      url: 'about:blank',\n      browserContextId: contextId || undefined\n    });\n    const target = __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().get(targetId);\n    if (!target) {\n      throw new Error(`Missing target for page (id = ${targetId})`);\n    }\n    const initialized = await target._initializedPromise;\n    if (!initialized) {\n      throw new Error(`Failed to create target for page (id = ${targetId})`);\n    }\n    const page = await target.page();\n    if (!page) {\n      throw new Error(`Failed to create a page for context (id = ${contextId})`);\n    }\n    return page;\n  }\n  /**\n   * All active targets inside the Browser. In case of multiple browser contexts, returns\n   * an array with all the targets in all browser contexts.\n   */\n  targets() {\n    return Array.from(__classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().values()).filter(target => {\n      return target._isInitialized;\n    });\n  }\n  /**\n   * The target associated with the browser.\n   */\n  target() {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n  /**\n   * Searches for a target in all browser contexts.\n   *\n   * @param predicate - A function to be run for every target.\n   * @returns The first target found that matches the `predicate` function.\n   *\n   * @example\n   *\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browser.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  async waitForTarget(predicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      timeout = 30000\n    } = options;\n    let resolve;\n    let isResolved = false;\n    const targetPromise = new Promise(x => {\n      return resolve = x;\n    });\n    this.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n    this.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    try {\n      this.targets().forEach(check);\n      if (!timeout) {\n        return await targetPromise;\n      }\n      return await (0, util_js_1.waitWithTimeout)(targetPromise, 'target', timeout);\n    } finally {\n      this.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n      this.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    }\n    async function check(target) {\n      if ((await predicate(target)) && !isResolved) {\n        isResolved = true;\n        resolve(target);\n      }\n    }\n  }\n  /**\n   * An array of all open pages inside the Browser.\n   *\n   * @remarks\n   *\n   * In case of multiple browser contexts, returns an array with all the pages in all\n   * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n   * here. You can find them using {@link Target.page}.\n   */\n  async pages() {\n    const contextPages = await Promise.all(this.browserContexts().map(context => {\n      return context.pages();\n    }));\n    // Flatten array.\n    return contextPages.reduce((acc, x) => {\n      return acc.concat(x);\n    }, []);\n  }\n  /**\n   * A string representing the browser name and version.\n   *\n   * @remarks\n   *\n   * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n   * non-headless, this is similar to `Chrome/61.0.3153.0`.\n   *\n   * The format of browser.version() might change with future releases of Chromium.\n   */\n  async version() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.product;\n  }\n  /**\n   * The browser's original user agent. Pages can override the browser user agent with\n   * {@link Page.setUserAgent}.\n   */\n  async userAgent() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.userAgent;\n  }\n  /**\n   * Closes Chromium and all of its pages (if any were opened). The\n   * {@link CDPBrowser} object itself is considered to be disposed and cannot be\n   * used anymore.\n   */\n  async close() {\n    await __classPrivateFieldGet(this, _CDPBrowser_closeCallback, \"f\").call(null);\n    this.disconnect();\n  }\n  /**\n   * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n   * After calling `disconnect`, the {@link CDPBrowser} object is considered disposed and\n   * cannot be used anymore.\n   */\n  disconnect() {\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").dispose();\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").dispose();\n  }\n  /**\n   * Indicates that the browser is connected.\n   */\n  isConnected() {\n    return !__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._closed;\n  }\n}\nexports.CDPBrowser = CDPBrowser;\n_CDPBrowser_ignoreHTTPSErrors = new WeakMap(), _CDPBrowser_defaultViewport = new WeakMap(), _CDPBrowser_process = new WeakMap(), _CDPBrowser_connection = new WeakMap(), _CDPBrowser_closeCallback = new WeakMap(), _CDPBrowser_targetFilterCallback = new WeakMap(), _CDPBrowser_isPageTargetCallback = new WeakMap(), _CDPBrowser_defaultContext = new WeakMap(), _CDPBrowser_contexts = new WeakMap(), _CDPBrowser_screenshotTaskQueue = new WeakMap(), _CDPBrowser_targetManager = new WeakMap(), _CDPBrowser_emitDisconnected = new WeakMap(), _CDPBrowser_createTarget = new WeakMap(), _CDPBrowser_onAttachedToTarget = new WeakMap(), _CDPBrowser_onDetachedFromTarget = new WeakMap(), _CDPBrowser_onTargetChanged = new WeakMap(), _CDPBrowser_onTargetDiscovered = new WeakMap(), _CDPBrowser_instances = new WeakSet(), _CDPBrowser_setIsPageTargetCallback = function _CDPBrowser_setIsPageTargetCallback(isPageTargetCallback) {\n  __classPrivateFieldSet(this, _CDPBrowser_isPageTargetCallback, isPageTargetCallback || (target => {\n    return target.type === 'page' || target.type === 'background_page' || target.type === 'webview';\n  }), \"f\");\n}, _CDPBrowser_getVersion = function _CDPBrowser_getVersion() {\n  return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * @internal\n */\nclass CDPBrowserContext extends Browser_js_1.BrowserContext {\n  /**\n   * @internal\n   */\n  constructor(connection, browser, contextId) {\n    super();\n    _CDPBrowserContext_connection.set(this, void 0);\n    _CDPBrowserContext_browser.set(this, void 0);\n    _CDPBrowserContext_id.set(this, void 0);\n    __classPrivateFieldSet(this, _CDPBrowserContext_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_browser, browser, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_id, contextId, \"f\");\n  }\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  /**\n   * This searches for a target in this specific browser context.\n   *\n   * @example\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   *\n   * @param predicate - A function to be run for every target\n   * @param options - An object of options. Accepts a timout,\n   * which is the maximum wait time in milliseconds.\n   * Pass `0` to disable the timeout. Defaults to 30 seconds.\n   * @returns Promise which resolves to the first target found\n   * that matches the `predicate` function.\n   */\n  waitForTarget(predicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  async pages() {\n    const pages = await Promise.all(this.targets().filter(target => {\n      var _a;\n      return target.type() === 'page' || target.type() === 'other' && ((_a = __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()));\n    }).map(target => {\n      return target.page();\n    }));\n    return pages.filter(page => {\n      return !!page;\n    });\n  }\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito() {\n    return !!__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n   * @param permissions - An array of permissions to grant.\n   * All permissions that are not listed here will be automatically denied.\n   */\n  async overridePermissions(origin, permissions) {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission = Browser_js_1.WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n      origin,\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined,\n      permissions: protocolPermissions\n    });\n  }\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  async clearPermissionOverrides() {\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined\n    });\n  }\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\");\n  }\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  async close() {\n    (0, assert_js_1.assert)(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n    await __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n}\nexports.CDPBrowserContext = CDPBrowserContext;\n_CDPBrowserContext_connection = new WeakMap(), _CDPBrowserContext_browser = new WeakMap(), _CDPBrowserContext_id = new WeakMap();","map":{"version":3,"mappings":"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","names":["CDPBrowser","Browser_js_1","constructor","product","connection","contextIds","ignoreHTTPSErrors","defaultViewport","process","closeCallback","targetFilterCallback","isPageTargetCallback","_CDPBrowser_ignoreHTTPSErrors","_CDPBrowser_defaultViewport","_CDPBrowser_process","_CDPBrowser_connection","_CDPBrowser_closeCallback","_CDPBrowser_targetFilterCallback","_CDPBrowser_isPageTargetCallback","_CDPBrowser_defaultContext","_CDPBrowser_contexts","_CDPBrowser_screenshotTaskQueue","_CDPBrowser_targetManager","_CDPBrowser_emitDisconnected","emit","_CDPBrowser_createTarget","targetInfo","session","browserContextId","context","__classPrivateFieldGet","has","get","Error","Target_js_1","isAutoAttachEmulated","_createSession","_CDPBrowser_onAttachedToTarget","target","_initializedPromise","browserContext","_CDPBrowser_onDetachedFromTarget","_initializedCallback","_closedCallback","_CDPBrowser_onTargetChanged","previousURL","url","wasInitialized","_isInitialized","_targetInfoChanged","_CDPBrowser_onTargetDiscovered","__classPrivateFieldSet","TaskQueue_js_1","FirefoxTargetManager_js_1","ChromeTargetManager_js_1","CDPBrowserContext","Map","contextId","set","_create","browser","_attach","_targets","getAvailableTargets","on","Connection_js_1","Disconnected","initialize","_detach","off","_targetManager","_getIsPageTargetCallback","createIncognitoBrowserContext","options","proxyServer","proxyBypassList","send","join","browserContexts","Array","from","values","defaultBrowserContext","_disposeContext","delete","wsEndpoint","newPage","_createPageInContext","targetId","undefined","initialized","page","targets","filter","browserTarget","find","type","waitForTarget","predicate","timeout","resolve","isResolved","targetPromise","Promise","x","check","forEach","pages","contextPages","all","map","reduce","acc","concat","version","userAgent","close","call","disconnect","dispose","isConnected","_closed","exports","_CDPBrowserContext_connection","_CDPBrowserContext_browser","_CDPBrowserContext_id","_getTargetInfo","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","clearPermissionOverrides"],"sources":["../../../../src/common/Browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}