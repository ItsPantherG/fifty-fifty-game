{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Tracing_client, _Tracing_recording, _Tracing_path;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert_js_1 = require(\"../util/assert.js\");\nconst util_js_1 = require(\"./util.js\");\nconst ErrorLike_js_1 = require(\"../util/ErrorLike.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n *\n * ```ts\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nclass Tracing {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Tracing_client.set(this, void 0);\n    _Tracing_recording.set(this, false);\n    _Tracing_path.set(this, void 0);\n    __classPrivateFieldSet(this, _Tracing_client, client, \"f\");\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   *\n   * @param options - Optional `TracingOptions`.\n   */\n  async start() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _Tracing_recording, \"f\"), 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler'];\n    const {\n      path,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) {\n      categories.push('disabled-by-default-devtools.screenshot');\n    }\n    const excludedCategories = categories.filter(cat => {\n      return cat.startsWith('-');\n    }).map(cat => {\n      return cat.slice(1);\n    });\n    const includedCategories = categories.filter(cat => {\n      return !cat.startsWith('-');\n    });\n    __classPrivateFieldSet(this, _Tracing_path, path, \"f\");\n    __classPrivateFieldSet(this, _Tracing_recording, true, \"f\");\n    await __classPrivateFieldGet(this, _Tracing_client, \"f\").send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      traceConfig: {\n        excludedCategories,\n        includedCategories\n      }\n    });\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n  async stop() {\n    let resolve;\n    let reject;\n    const contentPromise = new Promise((x, y) => {\n      resolve = x;\n      reject = y;\n    });\n    __classPrivateFieldGet(this, _Tracing_client, \"f\").once('Tracing.tracingComplete', async event => {\n      try {\n        const readable = await (0, util_js_1.getReadableFromProtocolStream)(__classPrivateFieldGet(this, _Tracing_client, \"f\"), event.stream);\n        const buffer = await (0, util_js_1.getReadableAsBuffer)(readable, __classPrivateFieldGet(this, _Tracing_path, \"f\"));\n        resolve(buffer !== null && buffer !== void 0 ? buffer : undefined);\n      } catch (error) {\n        if ((0, ErrorLike_js_1.isErrorLike)(error)) {\n          reject(error);\n        } else {\n          reject(new Error(`Unknown error: ${error}`));\n        }\n      }\n    });\n    await __classPrivateFieldGet(this, _Tracing_client, \"f\").send('Tracing.end');\n    __classPrivateFieldSet(this, _Tracing_recording, false, \"f\");\n    return contentPromise;\n  }\n}\nexports.Tracing = Tracing;\n_Tracing_client = new WeakMap(), _Tracing_recording = new WeakMap(), _Tracing_path = new WeakMap();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AAYA;;;;;;;;;;;;;;;;AAgBA,MAAaA,OAAO;EAKlB;;;EAGAC,YAAYC,MAAkB;IAP9BC;IACAC,6BAAa,KAAK;IAClBC;IAMEC,2BAAI,mBAAWJ,MAAM;EACvB;EAEA;;;;;;;EAOA,MAAMK,KAAK,GAA6B;IAAA,IAA5BC,8EAA0B,EAAE;IACtC,sBAAM,EACJ,CAACC,2BAAI,0BAAW,EAChB,6DAA6D,CAC9D;IAED,MAAMC,iBAAiB,GAAG,CACxB,IAAI,EACJ,mBAAmB,EACnB,YAAY,EACZ,uCAAuC,EACvC,6CAA6C,EAC7C,UAAU,EACV,eAAe,EACf,mBAAmB,EACnB,aAAa,EACb,6CAA6C,EAC7C,qCAAqC,CACtC;IACD,MAAM;MAACC,IAAI;MAAEC,WAAW,GAAG,KAAK;MAAEC,UAAU,GAAGH;IAAiB,CAAC,GAAGF,OAAO;IAE3E,IAAII,WAAW,EAAE;MACfC,UAAU,CAACC,IAAI,CAAC,yCAAyC,CAAC;;IAG5D,MAAMC,kBAAkB,GAAGF,UAAU,CAClCG,MAAM,CAACC,GAAG,IAAG;MACZ,OAAOA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;IAC5B,CAAC,CAAC,CACDC,GAAG,CAACF,GAAG,IAAG;MACT,OAAOA,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;IACJ,MAAMC,kBAAkB,GAAGR,UAAU,CAACG,MAAM,CAACC,GAAG,IAAG;MACjD,OAAO,CAACA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;IAC7B,CAAC,CAAC;IAEFZ,2BAAI,iBAASK,IAAI;IACjBL,2BAAI,sBAAc,IAAI;IACtB,MAAMG,2BAAI,uBAAQ,CAACa,IAAI,CAAC,eAAe,EAAE;MACvCC,YAAY,EAAE,gBAAgB;MAC9BC,WAAW,EAAE;QACXT,kBAAkB;QAClBM;;KAEH,CAAC;EACJ;EAEA;;;;EAIA,MAAMI,IAAI;IACR,IAAIC,OAA4C;IAChD,IAAIC,MAA4B;IAChC,MAAMC,cAAc,GAAG,IAAIC,OAAO,CAAqB,CAACC,CAAC,EAAEC,CAAC,KAAI;MAC9DL,OAAO,GAAGI,CAAC;MACXH,MAAM,GAAGI,CAAC;IACZ,CAAC,CAAC;IACFtB,2BAAI,uBAAQ,CAACuB,IAAI,CAAC,yBAAyB,EAAE,MAAMC,KAAK,IAAG;MACzD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM,2CAA6B,EAClDzB,2BAAI,uBAAQ,EACZwB,KAAK,CAACE,MAAM,CACb;QACD,MAAMC,MAAM,GAAG,MAAM,iCAAmB,EAACF,QAAQ,EAAEzB,2BAAI,qBAAM,CAAC;QAC9DiB,OAAO,CAACU,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIC,SAAS,CAAC;OAC7B,CAAC,OAAOC,KAAK,EAAE;QACd,IAAI,8BAAW,EAACA,KAAK,CAAC,EAAE;UACtBX,MAAM,CAACW,KAAK,CAAC;SACd,MAAM;UACLX,MAAM,CAAC,IAAIY,KAAK,CAAC,kBAAkBD,KAAK,EAAE,CAAC,CAAC;;;IAGlD,CAAC,CAAC;IACF,MAAM7B,2BAAI,uBAAQ,CAACa,IAAI,CAAC,aAAa,CAAC;IACtChB,2BAAI,sBAAc,KAAK;IACvB,OAAOsB,cAAc;EACvB;;AAhGFY","names":["Tracing","constructor","client","_Tracing_client","_Tracing_recording","_Tracing_path","__classPrivateFieldSet","start","options","__classPrivateFieldGet","defaultCategories","path","screenshots","categories","push","excludedCategories","filter","cat","startsWith","map","slice","includedCategories","send","transferMode","traceConfig","stop","resolve","reject","contentPromise","Promise","x","y","once","event","readable","stream","buffer","undefined","error","Error","exports"],"sources":["../../../../src/common/Tracing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}