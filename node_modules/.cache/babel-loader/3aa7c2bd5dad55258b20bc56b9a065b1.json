{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CDPPage_instances, _CDPPage_closed, _CDPPage_client, _CDPPage_target, _CDPPage_keyboard, _CDPPage_mouse, _CDPPage_timeoutSettings, _CDPPage_touchscreen, _CDPPage_accessibility, _CDPPage_frameManager, _CDPPage_emulationManager, _CDPPage_tracing, _CDPPage_pageBindings, _CDPPage_coverage, _CDPPage_javascriptEnabled, _CDPPage_viewport, _CDPPage_screenshotTaskQueue, _CDPPage_workers, _CDPPage_fileChooserPromises, _CDPPage_disconnectPromise, _CDPPage_userDragInterceptionEnabled, _CDPPage_onDetachedFromTarget, _CDPPage_onAttachedToTarget, _CDPPage_initialize, _CDPPage_onFileChooser, _CDPPage_onTargetCrashed, _CDPPage_onLogEntryAdded, _CDPPage_emitMetrics, _CDPPage_buildMetricsObject, _CDPPage_handleException, _CDPPage_onConsoleAPI, _CDPPage_onBindingCalled, _CDPPage_addConsoleMessage, _CDPPage_onDialog, _CDPPage_resetDefaultBackgroundColor, _CDPPage_setTransparentBackgroundColor, _CDPPage_sessionClosePromise, _CDPPage_go, _CDPPage_screenshotTask;\nimport { Page } from '../api/Page.js';\nimport { assert } from '../util/assert.js';\nimport { createDeferredPromise } from '../util/DeferredPromise.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { Accessibility } from './Accessibility.js';\nimport { CDPSessionEmittedEvents, isTargetClosedError } from './Connection.js';\nimport { ConsoleMessage } from './ConsoleMessage.js';\nimport { Coverage } from './Coverage.js';\nimport { Dialog } from './Dialog.js';\nimport { EmulationManager } from './EmulationManager.js';\nimport { FileChooser } from './FileChooser.js';\nimport { FrameManager, FrameManagerEmittedEvents } from './FrameManager.js';\nimport { Keyboard, Mouse, Touchscreen } from './Input.js';\nimport { MAIN_WORLD } from './IsolatedWorld.js';\nimport { NetworkManagerEmittedEvents } from './NetworkManager.js';\nimport { _paperFormats } from './PDFOptions.js';\nimport { TimeoutSettings } from './TimeoutSettings.js';\nimport { Tracing } from './Tracing.js';\nimport { createJSHandle, debugError, evaluationString, getExceptionMessage, getReadableAsBuffer, getReadableFromProtocolStream, importFS, isNumber, isString, pageBindingDeliverErrorString, pageBindingDeliverErrorValueString, pageBindingDeliverResultString, pageBindingInitString, releaseObject, valueFromRemoteObject, waitForEvent, waitWithTimeout } from './util.js';\nimport { WebWorker } from './WebWorker.js';\n/**\n * @internal\n */\nexport class CDPPage extends Page {\n  /**\n   * @internal\n   */\n  constructor(client, target, ignoreHTTPSErrors, screenshotTaskQueue) {\n    super();\n    _CDPPage_instances.add(this);\n    _CDPPage_closed.set(this, false);\n    _CDPPage_client.set(this, void 0);\n    _CDPPage_target.set(this, void 0);\n    _CDPPage_keyboard.set(this, void 0);\n    _CDPPage_mouse.set(this, void 0);\n    _CDPPage_timeoutSettings.set(this, new TimeoutSettings());\n    _CDPPage_touchscreen.set(this, void 0);\n    _CDPPage_accessibility.set(this, void 0);\n    _CDPPage_frameManager.set(this, void 0);\n    _CDPPage_emulationManager.set(this, void 0);\n    _CDPPage_tracing.set(this, void 0);\n    _CDPPage_pageBindings.set(this, new Map());\n    _CDPPage_coverage.set(this, void 0);\n    _CDPPage_javascriptEnabled.set(this, true);\n    _CDPPage_viewport.set(this, void 0);\n    _CDPPage_screenshotTaskQueue.set(this, void 0);\n    _CDPPage_workers.set(this, new Map());\n    _CDPPage_fileChooserPromises.set(this, new Set());\n    _CDPPage_disconnectPromise.set(this, void 0);\n    _CDPPage_userDragInterceptionEnabled.set(this, false);\n    _CDPPage_onDetachedFromTarget.set(this, target => {\n      var _a;\n      const sessionId = (_a = target._session()) === null || _a === void 0 ? void 0 : _a.id();\n      __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").onDetachedFromTarget(target);\n      const worker = __classPrivateFieldGet(this, _CDPPage_workers, \"f\").get(sessionId);\n      if (!worker) {\n        return;\n      }\n      __classPrivateFieldGet(this, _CDPPage_workers, \"f\").delete(sessionId);\n      this.emit(\"workerdestroyed\" /* PageEmittedEvents.WorkerDestroyed */, worker);\n    });\n    _CDPPage_onAttachedToTarget.set(this, async createdTarget => {\n      __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").onAttachedToTarget(createdTarget);\n      if (createdTarget._getTargetInfo().type === 'worker') {\n        const session = createdTarget._session();\n        assert(session);\n        const worker = new WebWorker(session, createdTarget.url(), __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_addConsoleMessage).bind(this), __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_handleException).bind(this));\n        __classPrivateFieldGet(this, _CDPPage_workers, \"f\").set(session.id(), worker);\n        this.emit(\"workercreated\" /* PageEmittedEvents.WorkerCreated */, worker);\n      }\n      if (createdTarget._session()) {\n        __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetManager().addTargetInterceptor(createdTarget._session(), __classPrivateFieldGet(this, _CDPPage_onAttachedToTarget, \"f\"));\n      }\n    });\n    __classPrivateFieldSet(this, _CDPPage_client, client, \"f\");\n    __classPrivateFieldSet(this, _CDPPage_target, target, \"f\");\n    __classPrivateFieldSet(this, _CDPPage_keyboard, new Keyboard(client), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_mouse, new Mouse(client, __classPrivateFieldGet(this, _CDPPage_keyboard, \"f\")), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_touchscreen, new Touchscreen(client, __classPrivateFieldGet(this, _CDPPage_keyboard, \"f\")), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_accessibility, new Accessibility(client), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_frameManager, new FrameManager(client, this, ignoreHTTPSErrors, __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\")), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_emulationManager, new EmulationManager(client), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_tracing, new Tracing(client), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_coverage, new Coverage(client), \"f\");\n    __classPrivateFieldSet(this, _CDPPage_screenshotTaskQueue, screenshotTaskQueue, \"f\");\n    __classPrivateFieldSet(this, _CDPPage_viewport, null, \"f\");\n    __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetManager().addTargetInterceptor(__classPrivateFieldGet(this, _CDPPage_client, \"f\"), __classPrivateFieldGet(this, _CDPPage_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetManager().on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPPage_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").on(FrameManagerEmittedEvents.FrameAttached, event => {\n      return this.emit(\"frameattached\" /* PageEmittedEvents.FrameAttached */, event);\n    });\n    __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").on(FrameManagerEmittedEvents.FrameDetached, event => {\n      return this.emit(\"framedetached\" /* PageEmittedEvents.FrameDetached */, event);\n    });\n    __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").on(FrameManagerEmittedEvents.FrameNavigated, event => {\n      return this.emit(\"framenavigated\" /* PageEmittedEvents.FrameNavigated */, event);\n    });\n    const networkManager = __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager;\n    networkManager.on(NetworkManagerEmittedEvents.Request, event => {\n      return this.emit(\"request\" /* PageEmittedEvents.Request */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestServedFromCache, event => {\n      return this.emit(\"requestservedfromcache\" /* PageEmittedEvents.RequestServedFromCache */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.Response, event => {\n      return this.emit(\"response\" /* PageEmittedEvents.Response */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFailed, event => {\n      return this.emit(\"requestfailed\" /* PageEmittedEvents.RequestFailed */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFinished, event => {\n      return this.emit(\"requestfinished\" /* PageEmittedEvents.RequestFinished */, event);\n    });\n    client.on('Page.domContentEventFired', () => {\n      return this.emit(\"domcontentloaded\" /* PageEmittedEvents.DOMContentLoaded */);\n    });\n\n    client.on('Page.loadEventFired', () => {\n      return this.emit(\"load\" /* PageEmittedEvents.Load */);\n    });\n\n    client.on('Runtime.consoleAPICalled', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onConsoleAPI).call(this, event);\n    });\n    client.on('Runtime.bindingCalled', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onBindingCalled).call(this, event);\n    });\n    client.on('Page.javascriptDialogOpening', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onDialog).call(this, event);\n    });\n    client.on('Runtime.exceptionThrown', exception => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_handleException).call(this, exception.exceptionDetails);\n    });\n    client.on('Inspector.targetCrashed', () => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onTargetCrashed).call(this);\n    });\n    client.on('Performance.metrics', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_emitMetrics).call(this, event);\n    });\n    client.on('Log.entryAdded', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onLogEntryAdded).call(this, event);\n    });\n    client.on('Page.fileChooserOpened', event => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_onFileChooser).call(this, event);\n    });\n    __classPrivateFieldGet(this, _CDPPage_target, \"f\")._isClosedPromise.then(() => {\n      __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetManager().removeTargetInterceptor(__classPrivateFieldGet(this, _CDPPage_client, \"f\"), __classPrivateFieldGet(this, _CDPPage_onAttachedToTarget, \"f\"));\n      __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetManager().off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPPage_onDetachedFromTarget, \"f\"));\n      this.emit(\"close\" /* PageEmittedEvents.Close */);\n      __classPrivateFieldSet(this, _CDPPage_closed, true, \"f\");\n    });\n  }\n  /**\n   * @internal\n   */\n  static async _create(client, target, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {\n    const page = new CDPPage(client, target, ignoreHTTPSErrors, screenshotTaskQueue);\n    await __classPrivateFieldGet(page, _CDPPage_instances, \"m\", _CDPPage_initialize).call(page);\n    if (defaultViewport) {\n      try {\n        await page.setViewport(defaultViewport);\n      } catch (err) {\n        if (isErrorLike(err) && isTargetClosedError(err)) {\n          debugError(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return page;\n  }\n  /**\n   * @returns `true` if drag events are being intercepted, `false` otherwise.\n   */\n  isDragInterceptionEnabled() {\n    return __classPrivateFieldGet(this, _CDPPage_userDragInterceptionEnabled, \"f\");\n  }\n  /**\n   * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n   */\n  isJavaScriptEnabled() {\n    return __classPrivateFieldGet(this, _CDPPage_javascriptEnabled, \"f\");\n  }\n  /**\n   * This method is typically coupled with an action that triggers file\n   * choosing.\n   *\n   * :::caution\n   *\n   * This must be called before the file chooser is launched. It will not return\n   * a currently active file chooser.\n   *\n   * :::\n   *\n   * @remarks\n   * In non-headless Chromium, this method results in the native file picker\n   * dialog `not showing up` for the user.\n   *\n   * @example\n   * The following example clicks a button that issues a file chooser\n   * and then responds with `/tmp/myfile.pdf` as if a user has selected this file.\n   *\n   * ```ts\n   * const [fileChooser] = await Promise.all([\n   *   page.waitForFileChooser(),\n   *   page.click('#upload-file-button'),\n   *   // some button that triggers file selection\n   * ]);\n   * await fileChooser.accept(['/tmp/myfile.pdf']);\n   * ```\n   */\n  waitForFileChooser() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const needsEnable = __classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\").size === 0;\n    const {\n      timeout = __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout()\n    } = options;\n    const promise = createDeferredPromise({\n      message: `Waiting for \\`FileChooser\\` failed: ${timeout}ms exceeded`,\n      timeout\n    });\n    __classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\").add(promise);\n    let enablePromise;\n    if (needsEnable) {\n      enablePromise = __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.setInterceptFileChooserDialog', {\n        enabled: true\n      });\n    }\n    return Promise.all([promise, enablePromise]).then(_ref => {\n      let [result] = _ref;\n      return result;\n    }).catch(error => {\n      __classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\").delete(promise);\n      throw error;\n    });\n  }\n  /**\n   * Sets the page's geolocation.\n   *\n   * @remarks\n   * Consider using {@link BrowserContext.overridePermissions} to grant\n   * permissions for the page to read its geolocation.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n   * ```\n   */\n  async setGeolocation(options) {\n    const {\n      longitude,\n      latitude,\n      accuracy = 0\n    } = options;\n    if (longitude < -180 || longitude > 180) {\n      throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n    }\n    if (latitude < -90 || latitude > 90) {\n      throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n    }\n    if (accuracy < 0) {\n      throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n    }\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setGeolocationOverride', {\n      longitude,\n      latitude,\n      accuracy\n    });\n  }\n  /**\n   * @returns A target this page was created from.\n   */\n  target() {\n    return __classPrivateFieldGet(this, _CDPPage_target, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _client() {\n    return __classPrivateFieldGet(this, _CDPPage_client, \"f\");\n  }\n  /**\n   * Get the browser the page belongs to.\n   */\n  browser() {\n    return __classPrivateFieldGet(this, _CDPPage_target, \"f\").browser();\n  }\n  /**\n   * Get the browser context that the page belongs to.\n   */\n  browserContext() {\n    return __classPrivateFieldGet(this, _CDPPage_target, \"f\").browserContext();\n  }\n  /**\n   * @returns The page's main frame.\n   *\n   * @remarks\n   * Page is guaranteed to have a main frame which persists during navigations.\n   */\n  mainFrame() {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame();\n  }\n  get keyboard() {\n    return __classPrivateFieldGet(this, _CDPPage_keyboard, \"f\");\n  }\n  get touchscreen() {\n    return __classPrivateFieldGet(this, _CDPPage_touchscreen, \"f\");\n  }\n  get coverage() {\n    return __classPrivateFieldGet(this, _CDPPage_coverage, \"f\");\n  }\n  get tracing() {\n    return __classPrivateFieldGet(this, _CDPPage_tracing, \"f\");\n  }\n  get accessibility() {\n    return __classPrivateFieldGet(this, _CDPPage_accessibility, \"f\");\n  }\n  /**\n   * @returns An array of all frames attached to the page.\n   */\n  frames() {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").frames();\n  }\n  /**\n   * @returns all of the dedicated {@link\n   * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n   * WebWorkers} associated with the page.\n   *\n   * @remarks\n   * This does not contain ServiceWorkers\n   */\n  workers() {\n    return Array.from(__classPrivateFieldGet(this, _CDPPage_workers, \"f\").values());\n  }\n  /**\n   * Activating request interception enables {@link HTTPRequest.abort},\n   * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods. This\n   * provides the capability to modify network requests that are made by a page.\n   *\n   * Once request interception is enabled, every request will stall unless it's\n   * continued, responded or aborted; or completed using the browser cache.\n   *\n   * Enabling request interception disables page caching.\n   *\n   * See the\n   * {@link https://pptr.dev/next/guides/request-interception|Request interception guide}\n   * for more details.\n   *\n   * @example\n   * An example of a naïve request interceptor that aborts all image requests:\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.setRequestInterception(true);\n   *   page.on('request', interceptedRequest => {\n   *     if (\n   *       interceptedRequest.url().endsWith('.png') ||\n   *       interceptedRequest.url().endsWith('.jpg')\n   *     )\n   *       interceptedRequest.abort();\n   *     else interceptedRequest.continue();\n   *   });\n   *   await page.goto('https://example.com');\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param value - Whether to enable request interception.\n   */\n  async setRequestInterception(value) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.setRequestInterception(value);\n  }\n  /**\n   * @param enabled - Whether to enable drag interception.\n   *\n   * @remarks\n   * Activating drag interception enables the `Input.drag`,\n   * methods This provides the capability to capture drag events emitted\n   * on the page, which can then be used to simulate drag-and-drop.\n   */\n  async setDragInterception(enabled) {\n    __classPrivateFieldSet(this, _CDPPage_userDragInterceptionEnabled, enabled, \"f\");\n    return __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Input.setInterceptDrags', {\n      enabled\n    });\n  }\n  setOfflineMode(enabled) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.setOfflineMode(enabled);\n  }\n  emulateNetworkConditions(networkConditions) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.emulateNetworkConditions(networkConditions);\n  }\n  /**\n   * This setting will change the default maximum navigation time for the\n   * following methods and related shortcuts:\n   *\n   * - {@link Page.goBack | page.goBack(options)}\n   *\n   * - {@link Page.goForward | page.goForward(options)}\n   *\n   * - {@link Page.goto | page.goto(url,options)}\n   *\n   * - {@link Page.reload | page.reload(options)}\n   *\n   * - {@link Page.setContent | page.setContent(html,options)}\n   *\n   * - {@link Page.waitForNavigation | page.waitForNavigation(options)}\n   *   @param timeout - Maximum navigation time in milliseconds.\n   */\n  setDefaultNavigationTimeout(timeout) {\n    __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").setDefaultNavigationTimeout(timeout);\n  }\n  /**\n   * @param timeout - Maximum time in milliseconds.\n   */\n  setDefaultTimeout(timeout) {\n    __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").setDefaultTimeout(timeout);\n  }\n  /**\n   * @returns Maximum time in milliseconds.\n   */\n  getDefaultTimeout() {\n    return __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout();\n  }\n  /**\n   * Runs `document.querySelector` within the page. If no element matches the\n   * selector, the return value resolves to `null`.\n   *\n   * @param selector - A `selector` to query page for\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query page for.\n   */\n  async $(selector) {\n    return this.mainFrame().$(selector);\n  }\n  /**\n   * The method runs `document.querySelectorAll` within the page. If no elements\n   * match the selector, the return value resolves to `[]`.\n   * @remarks\n   * Shortcut for {@link Frame.$$ | Page.mainFrame().$$(selector) }.\n   * @param selector - A `selector` to query page for\n   */\n  async $$(selector) {\n    return this.mainFrame().$$(selector);\n  }\n  /**\n   * @remarks\n   *\n   * The only difference between {@link Page.evaluate | page.evaluate} and\n   * `page.evaluateHandle` is that `evaluateHandle` will return the value\n   * wrapped in an in-page object.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   *\n   * ```ts\n   * const aHandle = await page.evaluateHandle('document');\n   * ```\n   *\n   * @example\n   * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n   *\n   * ```ts\n   * const aHandle = await page.evaluateHandle(() => document.body);\n   * const resultHandle = await page.evaluateHandle(\n   *   body => body.innerHTML,\n   *   aHandle\n   * );\n   * console.log(await resultHandle.jsonValue());\n   * await resultHandle.dispose();\n   * ```\n   *\n   * Most of the time this function returns a {@link JSHandle},\n   * but if `pageFunction` returns a reference to an element,\n   * you instead get an {@link ElementHandle} back:\n   *\n   * @example\n   *\n   * ```ts\n   * const button = await page.evaluateHandle(() =>\n   *   document.querySelector('button')\n   * );\n   * // can call `click` because `button` is an `ElementHandle`\n   * await button.click();\n   * ```\n   *\n   * The TypeScript definitions assume that `evaluateHandle` returns\n   * a `JSHandle`, but if you know it's going to return an\n   * `ElementHandle`, pass it as the generic argument:\n   *\n   * ```ts\n   * const button = await page.evaluateHandle<ElementHandle>(...);\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   */\n  async evaluateHandle(pageFunction) {\n    const context = await this.mainFrame().executionContext();\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return context.evaluateHandle(pageFunction, ...args);\n  }\n  /**\n   * This method iterates the JavaScript heap and finds all objects with the\n   * given prototype.\n   *\n   * @example\n   *\n   * ```ts\n   * // Create a Map object\n   * await page.evaluate(() => (window.map = new Map()));\n   * // Get a handle to the Map object prototype\n   * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n   * // Query all map instances into an array\n   * const mapInstances = await page.queryObjects(mapPrototype);\n   * // Count amount of map objects in heap\n   * const count = await page.evaluate(maps => maps.length, mapInstances);\n   * await mapInstances.dispose();\n   * await mapPrototype.dispose();\n   * ```\n   *\n   * @param prototypeHandle - a handle to the object prototype.\n   * @returns Promise which resolves to a handle to an array of objects with\n   * this prototype.\n   */\n  async queryObjects(prototypeHandle) {\n    const context = await this.mainFrame().executionContext();\n    assert(!prototypeHandle.disposed, 'Prototype JSHandle is disposed!');\n    const remoteObject = prototypeHandle.remoteObject();\n    assert(remoteObject.objectId, 'Prototype JSHandle must not be referencing primitive value');\n    const response = await context._client.send('Runtime.queryObjects', {\n      prototypeObjectId: remoteObject.objectId\n    });\n    return createJSHandle(context, response.objects);\n  }\n  /**\n   * This method runs `document.querySelector` within the page and passes the\n   * result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   *\n   * If no element is found matching `selector`, the method will throw an error.\n   *\n   * If `pageFunction` returns a promise `$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```ts\n   * const searchValue = await page.$eval('#search', el => el.value);\n   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n   * const html = await page.$eval('.main-container', el => el.outerHTML);\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```ts\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * const searchValue = await page.$eval(\n   *   '#search',\n   *   (el: HTMLInputElement) => el.value\n   * );\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$eval`:\n   *\n   * @example\n   *\n   * ```ts\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const searchValue = await page.$eval<string>(\n   *   '#search',\n   *   (el: HTMLInputElement) => el.value\n   * );\n   * ```\n   *\n   * @param selector - the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction - the function to be evaluated in the page context.\n   * Will be passed the result of `document.querySelector(selector)` as its\n   * first argument.\n   * @param args - any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n  async $eval(selector, pageFunction) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    return this.mainFrame().$eval(selector, pageFunction, ...args);\n  }\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within\n   * the page and passes the result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```ts\n   * // get the amount of divs on the page\n   * const divCount = await page.$$eval('div', divs => divs.length);\n   *\n   * // get the text content of all the `.options` elements:\n   * const options = await page.$$eval('div > span.options', options => {\n   *   return options.map(option => option.textContent);\n   * });\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element[]`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```ts\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n   *   return elements.map(e => e.value);\n   * });\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$$eval`:\n   *\n   * @example\n   *\n   * ```ts\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const allInputValues = await page.$$eval<string[]>(\n   *   'input',\n   *   (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n   * );\n   * ```\n   *\n   * @param selector - the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction - the function to be evaluated in the page context.\n   * Will be passed the result of\n   * `Array.from(document.querySelectorAll(selector))` as its first argument.\n   * @param args - any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n  async $$eval(selector, pageFunction) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n    return this.mainFrame().$$eval(selector, pageFunction, ...args);\n  }\n  /**\n   * The method evaluates the XPath expression relative to the page document as\n   * its context node. If there are no such elements, the method resolves to an\n   * empty array.\n   *\n   * @remarks\n   * Shortcut for {@link Frame.$x | Page.mainFrame().$x(expression) }.\n   *\n   * @param expression - Expression to evaluate\n   */\n  async $x(expression) {\n    return this.mainFrame().$x(expression);\n  }\n  /**\n   * If no URLs are specified, this method returns cookies for the current page\n   * URL. If URLs are specified, only cookies for those URLs are returned.\n   */\n  async cookies() {\n    for (var _len4 = arguments.length, urls = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      urls[_key4] = arguments[_key4];\n    }\n    const originalCookies = (await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Network.getCookies', {\n      urls: urls.length ? urls : [this.url()]\n    })).cookies;\n    const unsupportedCookieAttributes = ['priority'];\n    const filterUnsupportedAttributes = cookie => {\n      for (const attr of unsupportedCookieAttributes) {\n        delete cookie[attr];\n      }\n      return cookie;\n    };\n    return originalCookies.map(filterUnsupportedAttributes);\n  }\n  async deleteCookie() {\n    const pageURL = this.url();\n    for (var _len5 = arguments.length, cookies = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      cookies[_key5] = arguments[_key5];\n    }\n    for (const cookie of cookies) {\n      const item = Object.assign({}, cookie);\n      if (!cookie.url && pageURL.startsWith('http')) {\n        item.url = pageURL;\n      }\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Network.deleteCookies', item);\n    }\n  }\n  /**\n   * @example\n   *\n   * ```ts\n   * await page.setCookie(cookieObject1, cookieObject2);\n   * ```\n   */\n  async setCookie() {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    for (var _len6 = arguments.length, cookies = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      cookies[_key6] = arguments[_key6];\n    }\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) {\n        item.url = pageURL;\n      }\n      assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n      assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Network.setCookies', {\n        cookies: items\n      });\n    }\n  }\n  /**\n   * Adds a `<script>` tag into the page with the desired URL or content.\n   *\n   * @remarks\n   * Shortcut for\n   * {@link Frame.addScriptTag | page.mainFrame().addScriptTag(options)}.\n   *\n   * @param options - Options for the script.\n   * @returns An {@link ElementHandle | element handle} to the injected\n   * `<script>` element.\n   */\n  async addScriptTag(options) {\n    return this.mainFrame().addScriptTag(options);\n  }\n  async addStyleTag(options) {\n    return this.mainFrame().addStyleTag(options);\n  }\n  /**\n   * The method adds a function called `name` on the page's `window` object.\n   * When called, the function executes `puppeteerFunction` in node.js and\n   * returns a `Promise` which resolves to the return value of\n   * `puppeteerFunction`.\n   *\n   * If the puppeteerFunction returns a `Promise`, it will be awaited.\n   *\n   * :::note\n   *\n   * Functions installed via `page.exposeFunction` survive navigations.\n   *\n   * :::note\n   *\n   * @example\n   * An example of adding an `md5` function into the page:\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * const crypto = require('crypto');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   page.on('console', msg => console.log(msg.text()));\n   *   await page.exposeFunction('md5', text =>\n   *     crypto.createHash('md5').update(text).digest('hex')\n   *   );\n   *   await page.evaluate(async () => {\n   *     // use window.md5 to compute hashes\n   *     const myString = 'PUPPETEER';\n   *     const myHash = await window.md5(myString);\n   *     console.log(`md5 of ${myString} is ${myHash}`);\n   *   });\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @example\n   * An example of adding a `window.readfile` function into the page:\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * const fs = require('fs');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   page.on('console', msg => console.log(msg.text()));\n   *   await page.exposeFunction('readfile', async filePath => {\n   *     return new Promise((resolve, reject) => {\n   *       fs.readFile(filePath, 'utf8', (err, text) => {\n   *         if (err) reject(err);\n   *         else resolve(text);\n   *       });\n   *     });\n   *   });\n   *   await page.evaluate(async () => {\n   *     // use window.readfile to read contents of a file\n   *     const content = await window.readfile('/etc/hosts');\n   *     console.log(content);\n   *   });\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param name - Name of the function on the window object\n   * @param pptrFunction - Callback function which will be called in Puppeteer's\n   * context.\n   */\n  async exposeFunction(name, pptrFunction) {\n    if (__classPrivateFieldGet(this, _CDPPage_pageBindings, \"f\").has(name)) {\n      throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n    }\n    let exposedFunction;\n    switch (typeof pptrFunction) {\n      case 'function':\n        exposedFunction = pptrFunction;\n        break;\n      default:\n        exposedFunction = pptrFunction.default;\n        break;\n    }\n    __classPrivateFieldGet(this, _CDPPage_pageBindings, \"f\").set(name, exposedFunction);\n    const expression = pageBindingInitString('exposedFun', name);\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Runtime.addBinding', {\n      name: name\n    });\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.addScriptToEvaluateOnNewDocument', {\n      source: expression\n    });\n    await Promise.all(this.frames().map(frame => {\n      return frame.evaluate(expression).catch(debugError);\n    }));\n  }\n  /**\n   * Provide credentials for `HTTP authentication`.\n   *\n   * @remarks\n   * To disable authentication, pass `null`.\n   */\n  async authenticate(credentials) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.authenticate(credentials);\n  }\n  /**\n   * The extra HTTP headers will be sent with every request the page initiates.\n   *\n   * :::tip\n   *\n   * All HTTP header names are lowercased. (HTTP headers are\n   * case-insensitive, so this shouldn’t impact your server code.)\n   *\n   * :::\n   *\n   * :::note\n   *\n   * page.setExtraHTTPHeaders does not guarantee the order of headers in\n   * the outgoing requests.\n   *\n   * :::\n   *\n   * @param headers - An object containing additional HTTP headers to be sent\n   * with every request. All header values must be strings.\n   */\n  async setExtraHTTPHeaders(headers) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.setExtraHTTPHeaders(headers);\n  }\n  /**\n   * @param userAgent - Specific user agent to use in this page\n   * @param userAgentData - Specific user agent client hint data to use in this\n   * page\n   * @returns Promise which resolves when the user agent is set.\n   */\n  async setUserAgent(userAgent, userAgentMetadata) {\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.setUserAgent(userAgent, userAgentMetadata);\n  }\n  /**\n   * @returns Object containing metrics as key/value pairs.\n   *\n   * - `Timestamp` : The timestamp when the metrics sample was taken.\n   *\n   * - `Documents` : Number of documents in the page.\n   *\n   * - `Frames` : Number of frames in the page.\n   *\n   * - `JSEventListeners` : Number of events in the page.\n   *\n   * - `Nodes` : Number of DOM nodes in the page.\n   *\n   * - `LayoutCount` : Total number of full or partial page layout.\n   *\n   * - `RecalcStyleCount` : Total number of page style recalculations.\n   *\n   * - `LayoutDuration` : Combined durations of all page layouts.\n   *\n   * - `RecalcStyleDuration` : Combined duration of all page style\n   *   recalculations.\n   *\n   * - `ScriptDuration` : Combined duration of JavaScript execution.\n   *\n   * - `TaskDuration` : Combined duration of all tasks performed by the browser.\n   *\n   * - `JSHeapUsedSize` : Used JavaScript heap size.\n   *\n   * - `JSHeapTotalSize` : Total JavaScript heap size.\n   *\n   * @remarks\n   * All timestamps are in monotonic time: monotonically increasing time\n   * in seconds since an arbitrary point in the past.\n   */\n  async metrics() {\n    const response = await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Performance.getMetrics');\n    return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_buildMetricsObject).call(this, response.metrics);\n  }\n  /**\n   *\n   * @returns\n   * @remarks Shortcut for\n   * {@link Frame.url | page.mainFrame().url()}.\n   */\n  url() {\n    return this.mainFrame().url();\n  }\n  async content() {\n    return await __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame().content();\n  }\n  /**\n   * @param html - HTML markup to assign to the page.\n   * @param options - Parameters that has some properties.\n   * @remarks\n   * The parameter `options` might have the following options.\n   *\n   * - `timeout` : Maximum time in milliseconds for resources to load, defaults\n   *   to 30 seconds, pass `0` to disable timeout. The default value can be\n   *   changed by using the {@link Page.setDefaultNavigationTimeout} or\n   *   {@link Page.setDefaultTimeout} methods.\n   *\n   * - `waitUntil`: When to consider setting markup succeeded, defaults to\n   *   `load`. Given an array of event strings, setting content is considered\n   *   to be successful after all events have been fired. Events can be\n   *   either:<br/>\n   * - `load` : consider setting content to be finished when the `load` event\n   *   is fired.<br/>\n   * - `domcontentloaded` : consider setting content to be finished when the\n   *   `DOMContentLoaded` event is fired.<br/>\n   * - `networkidle0` : consider setting content to be finished when there are\n   *   no more than 0 network connections for at least `500` ms.<br/>\n   * - `networkidle2` : consider setting content to be finished when there are\n   *   no more than 2 network connections for at least `500` ms.\n   */\n  async setContent(html) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    await __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame().setContent(html, options);\n  }\n  /**\n   * @param url - URL to navigate page to. The URL should include scheme, e.g.\n   * `https://`\n   * @param options - Navigation Parameter\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the {@link Page.setDefaultNavigationTimeout} or\n   *   {@link Page.setDefaultTimeout} methods.\n   *\n   * - `waitUntil`:When to consider navigation succeeded, defaults to `load`.\n   *   Given an array of event strings, navigation is considered to be\n   *   successful after all events have been fired. Events can be either:<br/>\n   * - `load` : consider navigation to be finished when the load event is\n   *   fired.<br/>\n   * - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   * - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   * - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   *\n   * - `referer` : Referer header value. If provided it will take preference\n   *   over the referer header value set by\n   *   {@link Page.setExtraHTTPHeaders |page.setExtraHTTPHeaders()}.\n   *\n   * `page.goto` will throw an error if:\n   *\n   * - there's an SSL error (e.g. in case of self-signed certificates).\n   * - target URL is invalid.\n   * - the timeout is exceeded during navigation.\n   * - the remote server does not respond or is unreachable.\n   * - the main resource failed to load.\n   *\n   * `page.goto` will not throw an error when any valid HTTP status code is\n   * returned by the remote server, including 404 \"Not Found\" and 500\n   * \"Internal Server Error\". The status code for such responses can be\n   * retrieved by calling response.status().\n   *\n   * NOTE: `page.goto` either throws an error or returns a main resource\n   * response. The only exceptions are navigation to about:blank or navigation\n   * to the same URL with a different hash, which would succeed and return null.\n   *\n   * NOTE: Headless mode doesn't support navigation to a PDF document. See the\n   * {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295 |\n   * upstream issue}.\n   *\n   * Shortcut for {@link Frame.goto | page.mainFrame().goto(url, options)}.\n   */\n  async goto(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return await __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame().goto(url, options);\n  }\n  /**\n   * @param options - Navigation parameters which might have the following\n   * properties:\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the {@link Page.setDefaultNavigationTimeout} or\n   *   {@link Page.setDefaultTimeout} methods.\n   *\n   * - `waitUntil`: When to consider navigation succeeded, defaults to `load`.\n   *   Given an array of event strings, navigation is considered to be\n   *   successful after all events have been fired. Events can be either:<br/>\n   * - `load` : consider navigation to be finished when the load event is\n   *   fired.<br/>\n   * - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   * - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   * - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n  async reload(options) {\n    const result = await Promise.all([this.waitForNavigation(options), __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.reload')]);\n    return result[0];\n  }\n  /**\n   * Waits for the page to navigate to a new URL or to reload. It is useful when\n   * you run code that will indirectly cause the page to navigate.\n   *\n   * @example\n   *\n   * ```ts\n   * const [response] = await Promise.all([\n   *   page.waitForNavigation(), // The promise resolves after navigation has finished\n   *   page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n   * ]);\n   * ```\n   *\n   * @remarks\n   * Usage of the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n   * to change the URL is considered a navigation.\n   *\n   * @param options - Navigation parameters which might have the following\n   * properties:\n   * @returns A `Promise` which resolves to the main resource response.\n   *\n   * - In case of multiple redirects, the navigation will resolve with the\n   *   response of the last redirect.\n   * - In case of navigation to a different anchor or navigation due to History\n   *   API usage, the navigation will resolve with `null`.\n   */\n  async waitForNavigation() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return await __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame().waitForNavigation(options);\n  }\n  /**\n   * @param urlOrPredicate - A URL or predicate to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves to the matched response\n   * @example\n   *\n   * ```ts\n   * const firstResponse = await page.waitForResponse(\n   *   'https://example.com/resource'\n   * );\n   * const finalResponse = await page.waitForResponse(\n   *   response =>\n   *     response.url() === 'https://example.com' && response.status() === 200\n   * );\n   * const finalResponse = await page.waitForResponse(async response => {\n   *   return (await response.text()).includes('<html>');\n   * });\n   * return finalResponse.ok();\n   * ```\n   *\n   * @remarks\n   * Optional Waiting Parameters have:\n   *\n   * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass\n   *   `0` to disable the timeout. The default value can be changed by using the\n   *   {@link Page.setDefaultTimeout} method.\n   */\n  async waitForRequest(urlOrPredicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      timeout = __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout()\n    } = options;\n    return waitForEvent(__classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager, NetworkManagerEmittedEvents.Request, async request => {\n      if (isString(urlOrPredicate)) {\n        return urlOrPredicate === request.url();\n      }\n      if (typeof urlOrPredicate === 'function') {\n        return !!(await urlOrPredicate(request));\n      }\n      return false;\n    }, timeout, __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_sessionClosePromise).call(this));\n  }\n  /**\n   * @param urlOrPredicate - A URL or predicate to wait for.\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves to the matched response.\n   * @example\n   *\n   * ```ts\n   * const firstResponse = await page.waitForResponse(\n   *   'https://example.com/resource'\n   * );\n   * const finalResponse = await page.waitForResponse(\n   *   response =>\n   *     response.url() === 'https://example.com' && response.status() === 200\n   * );\n   * const finalResponse = await page.waitForResponse(async response => {\n   *   return (await response.text()).includes('<html>');\n   * });\n   * return finalResponse.ok();\n   * ```\n   *\n   * @remarks\n   * Optional Parameter have:\n   *\n   * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n   *   pass `0` to disable the timeout. The default value can be changed by using\n   *   the {@link Page.setDefaultTimeout} method.\n   */\n  async waitForResponse(urlOrPredicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      timeout = __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout()\n    } = options;\n    return waitForEvent(__classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager, NetworkManagerEmittedEvents.Response, async response => {\n      if (isString(urlOrPredicate)) {\n        return urlOrPredicate === response.url();\n      }\n      if (typeof urlOrPredicate === 'function') {\n        return !!(await urlOrPredicate(response));\n      }\n      return false;\n    }, timeout, __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_sessionClosePromise).call(this));\n  }\n  /**\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when network is idle\n   */\n  async waitForNetworkIdle() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      idleTime = 500,\n      timeout = __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout()\n    } = options;\n    const networkManager = __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager;\n    let idleResolveCallback;\n    const idlePromise = new Promise(resolve => {\n      idleResolveCallback = resolve;\n    });\n    let abortRejectCallback;\n    const abortPromise = new Promise((_, reject) => {\n      abortRejectCallback = reject;\n    });\n    let idleTimer;\n    const onIdle = () => {\n      return idleResolveCallback();\n    };\n    const cleanup = () => {\n      idleTimer && clearTimeout(idleTimer);\n      abortRejectCallback(new Error('abort'));\n    };\n    const evaluate = () => {\n      idleTimer && clearTimeout(idleTimer);\n      if (networkManager.numRequestsInProgress() === 0) {\n        idleTimer = setTimeout(onIdle, idleTime);\n      }\n    };\n    evaluate();\n    const eventHandler = () => {\n      evaluate();\n      return false;\n    };\n    const listenToEvent = event => {\n      return waitForEvent(networkManager, event, eventHandler, timeout, abortPromise);\n    };\n    const eventPromises = [listenToEvent(NetworkManagerEmittedEvents.Request), listenToEvent(NetworkManagerEmittedEvents.Response)];\n    await Promise.race([idlePromise, ...eventPromises, __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_sessionClosePromise).call(this)]).then(r => {\n      cleanup();\n      return r;\n    }, error => {\n      cleanup();\n      throw error;\n    });\n  }\n  /**\n   * @param urlOrPredicate - A URL or predicate to wait for.\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves to the matched frame.\n   * @example\n   *\n   * ```ts\n   * const frame = await page.waitForFrame(async frame => {\n   *   return frame.name() === 'Test';\n   * });\n   * ```\n   *\n   * @remarks\n   * Optional Parameter have:\n   *\n   * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n   *   pass `0` to disable the timeout. The default value can be changed by using\n   *   the {@link Page.setDefaultTimeout} method.\n   */\n  async waitForFrame(urlOrPredicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      timeout = __classPrivateFieldGet(this, _CDPPage_timeoutSettings, \"f\").timeout()\n    } = options;\n    let predicate;\n    if (isString(urlOrPredicate)) {\n      predicate = frame => {\n        return Promise.resolve(urlOrPredicate === frame.url());\n      };\n    } else {\n      predicate = frame => {\n        const value = urlOrPredicate(frame);\n        if (typeof value === 'boolean') {\n          return Promise.resolve(value);\n        }\n        return value;\n      };\n    }\n    const eventRace = Promise.race([waitForEvent(__classPrivateFieldGet(this, _CDPPage_frameManager, \"f\"), FrameManagerEmittedEvents.FrameAttached, predicate, timeout, __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_sessionClosePromise).call(this)), waitForEvent(__classPrivateFieldGet(this, _CDPPage_frameManager, \"f\"), FrameManagerEmittedEvents.FrameNavigated, predicate, timeout, __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_sessionClosePromise).call(this)), ...this.frames().map(async frame => {\n      if (await predicate(frame)) {\n        return frame;\n      }\n      return await eventRace;\n    })]);\n    return eventRace;\n  }\n  /**\n   * This method navigate to the previous page in history.\n   * @param options - Navigation parameters\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect. If can not go back, resolves to `null`.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the {@link Page.setDefaultNavigationTimeout} or\n   *   {@link Page.setDefaultTimeout} methods.\n   *\n   * - `waitUntil` : When to consider navigation succeeded, defaults to `load`.\n   *   Given an array of event strings, navigation is considered to be\n   *   successful after all events have been fired. Events can be either:<br/>\n   * - `load` : consider navigation to be finished when the load event is\n   *   fired.<br/>\n   * - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   * - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   * - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n  async goBack() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_go).call(this, -1, options);\n  }\n  /**\n   * This method navigate to the next page in history.\n   * @param options - Navigation Parameter\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect. If can not go forward, resolves to `null`.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the {@link Page.setDefaultNavigationTimeout} or\n   *   {@link Page.setDefaultTimeout} methods.\n   *\n   * - `waitUntil`: When to consider navigation succeeded, defaults to `load`.\n   *   Given an array of event strings, navigation is considered to be\n   *   successful after all events have been fired. Events can be either:<br/>\n   * - `load` : consider navigation to be finished when the load event is\n   *   fired.<br/>\n   * - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   * - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   * - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n  async goForward() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_go).call(this, +1, options);\n  }\n  /**\n   * Brings page to front (activates tab).\n   */\n  async bringToFront() {\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.bringToFront');\n  }\n  /**\n   * @param enabled - Whether or not to enable JavaScript on the page.\n   * @returns\n   * @remarks\n   * NOTE: changing this value won't affect scripts that have already been run.\n   * It will take full effect on the next navigation.\n   */\n  async setJavaScriptEnabled(enabled) {\n    if (__classPrivateFieldGet(this, _CDPPage_javascriptEnabled, \"f\") === enabled) {\n      return;\n    }\n    __classPrivateFieldSet(this, _CDPPage_javascriptEnabled, enabled, \"f\");\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setScriptExecutionDisabled', {\n      value: !enabled\n    });\n  }\n  /**\n   * Toggles bypassing page's Content-Security-Policy.\n   * @param enabled - sets bypassing of page's Content-Security-Policy.\n   * @remarks\n   * NOTE: CSP bypassing happens at the moment of CSP initialization rather than\n   * evaluation. Usually, this means that `page.setBypassCSP` should be called\n   * before navigating to the domain.\n   */\n  async setBypassCSP(enabled) {\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.setBypassCSP', {\n      enabled\n    });\n  }\n  /**\n   * @param type - Changes the CSS media type of the page. The only allowed\n   * values are `screen`, `print` and `null`. Passing `null` disables CSS media\n   * emulation.\n   * @example\n   *\n   * ```ts\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → false\n   *\n   * await page.emulateMediaType('print');\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → false\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → true\n   *\n   * await page.emulateMediaType(null);\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → false\n   * ```\n   */\n  async emulateMediaType(type) {\n    assert(type === 'screen' || type === 'print' || (type !== null && type !== void 0 ? type : undefined) === undefined, 'Unsupported media type: ' + type);\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setEmulatedMedia', {\n      media: type || ''\n    });\n  }\n  /**\n   * Enables CPU throttling to emulate slow CPUs.\n   * @param factor - slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).\n   */\n  async emulateCPUThrottling(factor) {\n    assert(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setCPUThrottlingRate', {\n      rate: factor !== null ? factor : 1\n    });\n  }\n  /**\n   * @param features - `<?Array<Object>>` Given an array of media feature\n   * objects, emulates CSS media features on the page. Each media feature object\n   * must have the following properties:\n   * @example\n   *\n   * ```ts\n   * await page.emulateMediaFeatures([\n   *   {name: 'prefers-color-scheme', value: 'dark'},\n   * ]);\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-color-scheme: dark)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-color-scheme: light)').matches\n   * );\n   * // → false\n   *\n   * await page.emulateMediaFeatures([\n   *   {name: 'prefers-reduced-motion', value: 'reduce'},\n   * ]);\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-reduced-motion: reduce)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n   * );\n   * // → false\n   *\n   * await page.emulateMediaFeatures([\n   *   {name: 'prefers-color-scheme', value: 'dark'},\n   *   {name: 'prefers-reduced-motion', value: 'reduce'},\n   * ]);\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-color-scheme: dark)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-color-scheme: light)').matches\n   * );\n   * // → false\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-reduced-motion: reduce)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   *   () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n   * );\n   * // → false\n   *\n   * await page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);\n   * await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n   * // → false\n   * ```\n   */\n  async emulateMediaFeatures(features) {\n    if (!features) {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setEmulatedMedia', {});\n    }\n    if (Array.isArray(features)) {\n      for (const mediaFeature of features) {\n        const name = mediaFeature.name;\n        assert(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n      }\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setEmulatedMedia', {\n        features: features\n      });\n    }\n  }\n  /**\n   * @param timezoneId - Changes the timezone of the page. See\n   * {@link https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt}\n   * for a list of supported timezone IDs. Passing\n   * `null` disables timezone emulation.\n   */\n  async emulateTimezone(timezoneId) {\n    try {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setTimezoneOverride', {\n        timezoneId: timezoneId || ''\n      });\n    } catch (error) {\n      if (isErrorLike(error) && error.message.includes('Invalid timezone')) {\n        throw new Error(`Invalid timezone ID: ${timezoneId}`);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Emulates the idle state.\n   * If no arguments set, clears idle state emulation.\n   *\n   * @example\n   *\n   * ```ts\n   * // set idle emulation\n   * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n   *\n   * // do some checks here\n   * ...\n   *\n   * // clear idle emulation\n   * await page.emulateIdleState();\n   * ```\n   *\n   * @param overrides - Mock idle state. If not set, clears idle overrides\n   */\n  async emulateIdleState(overrides) {\n    if (overrides) {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setIdleOverride', {\n        isUserActive: overrides.isUserActive,\n        isScreenUnlocked: overrides.isScreenUnlocked\n      });\n    } else {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.clearIdleOverride');\n    }\n  }\n  /**\n   * Simulates the given vision deficiency on the page.\n   *\n   * @example\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.goto('https://v8.dev/blog/10-years');\n   *\n   *   await page.emulateVisionDeficiency('achromatopsia');\n   *   await page.screenshot({path: 'achromatopsia.png'});\n   *\n   *   await page.emulateVisionDeficiency('deuteranopia');\n   *   await page.screenshot({path: 'deuteranopia.png'});\n   *\n   *   await page.emulateVisionDeficiency('blurredVision');\n   *   await page.screenshot({path: 'blurred-vision.png'});\n   *\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param type - the type of deficiency to simulate, or `'none'` to reset.\n   */\n  async emulateVisionDeficiency(type) {\n    const visionDeficiencies = new Set(['none', 'achromatopsia', 'blurredVision', 'deuteranopia', 'protanopia', 'tritanopia']);\n    try {\n      assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setEmulatedVisionDeficiency', {\n        type: type || 'none'\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  /**\n   * `page.setViewport` will resize the page. A lot of websites don't expect\n   * phones to change size, so you should set the viewport before navigating to\n   * the page.\n   *\n   * In the case of multiple pages in a single browser, each page can have its\n   * own viewport size.\n   * @example\n   *\n   * ```ts\n   * const page = await browser.newPage();\n   * await page.setViewport({\n   *   width: 640,\n   *   height: 480,\n   *   deviceScaleFactor: 1,\n   * });\n   * await page.goto('https://example.com');\n   * ```\n   *\n   * @param viewport -\n   * @remarks\n   * Argument viewport have following properties:\n   *\n   * - `width`: page width in pixels. required\n   *\n   * - `height`: page height in pixels. required\n   *\n   * - `deviceScaleFactor`: Specify device scale factor (can be thought of as\n   *   DPR). Defaults to `1`.\n   *\n   * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n   *   to `false`.\n   *\n   * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`\n   *\n   * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to false.\n   *\n   * NOTE: in certain cases, setting viewport will reload the page in order to\n   * set the isMobile or hasTouch properties.\n   */\n  async setViewport(viewport) {\n    const needsReload = await __classPrivateFieldGet(this, _CDPPage_emulationManager, \"f\").emulateViewport(viewport);\n    __classPrivateFieldSet(this, _CDPPage_viewport, viewport, \"f\");\n    if (needsReload) {\n      await this.reload();\n    }\n  }\n  /**\n   * @returns\n   *\n   * - `width`: page's width in pixels\n   *\n   * - `height`: page's height in pixels\n   *\n   * - `deviceScalarFactor`: Specify device scale factor (can be though of as\n   *   dpr). Defaults to `1`.\n   *\n   * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n   *   to `false`.\n   *\n   * - `hasTouch`: Specifies if viewport supports touch events. Defaults to\n   *   `false`.\n   *\n   * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to\n   *   `false`.\n   */\n  viewport() {\n    return __classPrivateFieldGet(this, _CDPPage_viewport, \"f\");\n  }\n  /**\n   * Evaluates a function in the page's context and returns the result.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * @example\n   *\n   * ```ts\n   * const result = await frame.evaluate(() => {\n   *   return Promise.resolve(8 * 7);\n   * });\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   *\n   * ```ts\n   * const aHandle = await page.evaluate('1 + 2');\n   * ```\n   *\n   * To get the best TypeScript experience, you should pass in as the\n   * generic the type of `pageFunction`:\n   *\n   * ```ts\n   * const aHandle = await page.evaluate(() => 2);\n   * ```\n   *\n   * @example\n   *\n   * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n   * as arguments to the `pageFunction`:\n   *\n   * ```ts\n   * const bodyHandle = await page.$('body');\n   * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n   * await bodyHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   *\n   * @returns the return value of `pageFunction`.\n   */\n  async evaluate(pageFunction) {\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n    return __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").mainFrame().evaluate(pageFunction, ...args);\n  }\n  /**\n   * Adds a function which would be invoked in one of the following scenarios:\n   *\n   * - whenever the page is navigated\n   *\n   * - whenever the child frame is attached or navigated. In this case, the\n   *   function is invoked in the context of the newly attached frame.\n   *\n   * The function is invoked after the document was created but before any of\n   * its scripts were run. This is useful to amend the JavaScript environment,\n   * e.g. to seed `Math.random`.\n   * @param pageFunction - Function to be evaluated in browser context\n   * @param args - Arguments to pass to `pageFunction`\n   * @example\n   * An example of overriding the navigator.languages property before the page loads:\n   *\n   * ```ts\n   * // preload.js\n   *\n   * // overwrite the `languages` property to use a custom getter\n   * Object.defineProperty(navigator, 'languages', {\n   *   get: function () {\n   *     return ['en-US', 'en', 'bn'];\n   *   },\n   * });\n   *\n   * // In your puppeteer script, assuming the preload.js file is\n   * // in same folder of our script.\n   * const preloadFile = fs.readFileSync('./preload.js', 'utf8');\n   * await page.evaluateOnNewDocument(preloadFile);\n   * ```\n   */\n  async evaluateOnNewDocument(pageFunction) {\n    for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      args[_key8 - 1] = arguments[_key8];\n    }\n    const source = evaluationString(pageFunction, ...args);\n    await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.addScriptToEvaluateOnNewDocument', {\n      source\n    });\n  }\n  /**\n   * Toggles ignoring cache for each request based on the enabled state. By\n   * default, caching is enabled.\n   * @param enabled - sets the `enabled` state of cache\n   */\n  async setCacheEnabled() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    await __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").networkManager.setCacheEnabled(enabled);\n  }\n  /**\n   * @remarks\n   * Options object which might have the following properties:\n   *\n   * - `path` : The file path to save the image to. The screenshot type\n   *   will be inferred from file extension. If `path` is a relative path, then\n   *   it is resolved relative to\n   *   {@link https://nodejs.org/api/process.html#process_process_cwd\n   *   | current working directory}.\n   *   If no path is provided, the image won't be saved to the disk.\n   *\n   * - `type` : Specify screenshot type, can be either `jpeg` or `png`.\n   *   Defaults to 'png'.\n   *\n   * - `quality` : The quality of the image, between 0-100. Not\n   *   applicable to `png` images.\n   *\n   * - `fullPage` : When true, takes a screenshot of the full\n   *   scrollable page. Defaults to `false`.\n   *\n   * - `clip` : An object which specifies clipping region of the page.\n   *   Should have the following fields:<br/>\n   * - `x` : x-coordinate of top-left corner of clip area.<br/>\n   * - `y` : y-coordinate of top-left corner of clip area.<br/>\n   * - `width` : width of clipping area.<br/>\n   * - `height` : height of clipping area.\n   *\n   * - `omitBackground` : Hides default white background and allows\n   *   capturing screenshots with transparency. Defaults to `false`.\n   *\n   * - `encoding` : The encoding of the image, can be either base64 or\n   *   binary. Defaults to `binary`.\n   *\n   * - `captureBeyondViewport` : When true, captures screenshot\n   *   {@link https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot\n   *   | beyond the viewport}. When false, falls back to old behaviour,\n   *   and cuts the screenshot by the viewport size. Defaults to `true`.\n   *\n   * - `fromSurface` : When true, captures screenshot\n   *   {@link https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot\n   *   | from the surface rather than the view}. When false, works only in\n   *   headful mode and ignores page viewport (but not browser window's\n   *   bounds). Defaults to `true`.\n   *\n   * NOTE: Screenshots take at least 1/6 second on OS X. See\n   * {@link https://crbug.com/741689} for discussion.\n   * @returns Promise which resolves to buffer or a base64 string (depending on\n   * the value of `encoding`) with captured screenshot.\n   */\n  async screenshot() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n    // options.type takes precedence over inferring the type from options.path\n    // because it may be a 0-length file with no extension created beforehand\n    // (i.e. as a temp file).\n    if (options.type) {\n      screenshotType = options.type;\n    } else if (options.path) {\n      const filePath = options.path;\n      const extension = filePath.slice(filePath.lastIndexOf('.') + 1).toLowerCase();\n      switch (extension) {\n        case 'png':\n          screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n          break;\n        case 'jpeg':\n        case 'jpg':\n          screenshotType = \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */;\n          break;\n        case 'webp':\n          screenshotType = \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */;\n          break;\n        default:\n          throw new Error(`Unsupported screenshot type for extension \\`.${extension}\\``);\n      }\n    }\n    if (options.quality) {\n      assert(screenshotType === \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */ || screenshotType === \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */, 'options.quality is unsupported for the ' + screenshotType + ' screenshots');\n      assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + typeof options.quality);\n      assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n      assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);\n    }\n    assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n    if (options.clip) {\n      assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + typeof options.clip.x);\n      assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + typeof options.clip.y);\n      assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + typeof options.clip.width);\n      assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + typeof options.clip.height);\n      assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n      assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n    }\n    return __classPrivateFieldGet(this, _CDPPage_screenshotTaskQueue, \"f\").postTask(() => {\n      return __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_screenshotTask).call(this, screenshotType, options);\n    });\n  }\n  /**\n   * Generates a PDF of the page with the `print` CSS media type.\n   * @remarks\n   *\n   * NOTE: PDF generation is only supported in Chrome headless mode.\n   *\n   * To generate a PDF with the `screen` media type, call\n   * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n   * calling `page.pdf()`.\n   *\n   * By default, `page.pdf()` generates a pdf with modified colors for printing.\n   * Use the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n   * property to force rendering of exact colors.\n   *\n   * @param options - options for generating the PDF.\n   */\n  async createPDFStream() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      scale = 1,\n      displayHeaderFooter = false,\n      headerTemplate = '',\n      footerTemplate = '',\n      printBackground = false,\n      landscape = false,\n      pageRanges = '',\n      preferCSSPageSize = false,\n      margin = {},\n      omitBackground = false,\n      timeout = 30000\n    } = options;\n    let paperWidth = 8.5;\n    let paperHeight = 11;\n    if (options.format) {\n      const format = _paperFormats[options.format.toLowerCase()];\n      assert(format, 'Unknown paper format: ' + options.format);\n      paperWidth = format.width;\n      paperHeight = format.height;\n    } else {\n      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n    }\n    const marginTop = convertPrintParameterToInches(margin.top) || 0;\n    const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n    const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n    const marginRight = convertPrintParameterToInches(margin.right) || 0;\n    if (omitBackground) {\n      await __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_setTransparentBackgroundColor).call(this);\n    }\n    const printCommandPromise = __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      pageRanges,\n      preferCSSPageSize\n    });\n    const result = await waitWithTimeout(printCommandPromise, 'Page.printToPDF', timeout);\n    if (omitBackground) {\n      await __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_resetDefaultBackgroundColor).call(this);\n    }\n    assert(result.stream, '`stream` is missing from `Page.printToPDF');\n    return getReadableFromProtocolStream(__classPrivateFieldGet(this, _CDPPage_client, \"f\"), result.stream);\n  }\n  /**\n   * @param options -\n   * @returns\n   */\n  async pdf() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      path = undefined\n    } = options;\n    const readable = await this.createPDFStream(options);\n    const buffer = await getReadableAsBuffer(readable, path);\n    assert(buffer, 'Could not create buffer');\n    return buffer;\n  }\n  /**\n   * @returns The page's title\n   * @remarks\n   * Shortcut for {@link Frame.title | page.mainFrame().title()}.\n   */\n  async title() {\n    return this.mainFrame().title();\n  }\n  async close() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      runBeforeUnload: undefined\n    };\n    const connection = __classPrivateFieldGet(this, _CDPPage_client, \"f\").connection();\n    assert(connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n    const runBeforeUnload = !!options.runBeforeUnload;\n    if (runBeforeUnload) {\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.close');\n    } else {\n      await connection.send('Target.closeTarget', {\n        targetId: __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetId\n      });\n      await __classPrivateFieldGet(this, _CDPPage_target, \"f\")._isClosedPromise;\n    }\n  }\n  /**\n   * Indicates that the page has been closed.\n   * @returns\n   */\n  isClosed() {\n    return __classPrivateFieldGet(this, _CDPPage_closed, \"f\");\n  }\n  get mouse() {\n    return __classPrivateFieldGet(this, _CDPPage_mouse, \"f\");\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.mouse} to click in the center of the\n   * element. If there's no element matching `selector`, the method throws an\n   * error.\n   * @remarks Bear in mind that if `click()` triggers a navigation event and\n   * there's a separate `page.waitForNavigation()` promise to be resolved, you\n   * may end up with a race condition that yields unexpected results. The\n   * correct pattern for click and wait for navigation is the following:\n   *\n   * ```ts\n   * const [response] = await Promise.all([\n   *   page.waitForNavigation(waitOptions),\n   *   page.click(selector, clickOptions),\n   * ]);\n   * ```\n   *\n   * Shortcut for {@link Frame.click | page.mainFrame().click(selector[, options]) }.\n   * @param selector - A `selector` to search for element to click. If there are\n   * multiple elements satisfying the `selector`, the first will be clicked\n   * @param options - `Object`\n   * @returns Promise which resolves when the element matching `selector` is\n   * successfully clicked. The Promise will be rejected if there is no element\n   * matching `selector`.\n   */\n  click(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.mainFrame().click(selector, options);\n  }\n  /**\n   * This method fetches an element with `selector` and focuses it. If there's no\n   * element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector }\n   * of an element to focus. If there are multiple elements satisfying the\n   * selector, the first will be focused.\n   * @returns Promise which resolves when the element matching selector is\n   * successfully focused. The promise will be rejected if there is no element\n   * matching selector.\n   * @remarks\n   * Shortcut for {@link Frame.focus | page.mainFrame().focus(selector)}.\n   */\n  focus(selector) {\n    return this.mainFrame().focus(selector);\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.mouse} to hover over the center of the element.\n   * If there's no element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to search for element to hover. If there are multiple elements satisfying\n   * the selector, the first will be hovered.\n   * @returns Promise which resolves when the element matching `selector` is\n   * successfully hovered. Promise gets rejected if there's no element matching\n   * `selector`.\n   * @remarks\n   * Shortcut for {@link Page.hover | page.mainFrame().hover(selector)}.\n   */\n  hover(selector) {\n    return this.mainFrame().hover(selector);\n  }\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been\n   * selected. If there's no `<select>` element matching `selector`, the method\n   * throws an error.\n   *\n   * @example\n   *\n   * ```ts\n   * page.select('select#colors', 'blue'); // single selection\n   * page.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n   * ```\n   *\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n   * to query the page for\n   * @param values - Values of options to select. If the `<select>` has the\n   * `multiple` attribute, all values are considered, otherwise only the first one\n   * is taken into account.\n   * @returns\n   *\n   * @remarks\n   * Shortcut for {@link Frame.select | page.mainFrame().select()}\n   */\n  select(selector) {\n    for (var _len9 = arguments.length, values = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      values[_key9 - 1] = arguments[_key9];\n    }\n    return this.mainFrame().select(selector, ...values);\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.touchscreen} to tap in the center of the element.\n   * If there's no element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n   * to search for element to tap. If there are multiple elements satisfying the\n   * selector, the first will be tapped.\n   * @returns\n   * @remarks\n   * Shortcut for {@link Frame.tap | page.mainFrame().tap(selector)}.\n   */\n  tap(selector) {\n    return this.mainFrame().tap(selector);\n  }\n  /**\n   * Sends a `keydown`, `keypress/input`, and `keyup` event for each character\n   * in the text.\n   *\n   * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n   * @example\n   *\n   * ```ts\n   * await page.type('#mytextarea', 'Hello');\n   * // Types instantly\n   * await page.type('#mytextarea', 'World', {delay: 100});\n   * // Types slower, like a user\n   * ```\n   *\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * of an element to type into. If there are multiple elements satisfying the\n   * selector, the first will be used.\n   * @param text - A text to type into a focused element.\n   * @param options - have property `delay` which is the Time to wait between\n   * key presses in milliseconds. Defaults to `0`.\n   * @returns\n   * @remarks\n   */\n  type(selector, text, options) {\n    return this.mainFrame().type(selector, text, options);\n  }\n  /**\n   * @deprecated Replace with `new Promise(r => setTimeout(r, milliseconds));`.\n   *\n   * Causes your script to wait for the given number of milliseconds.\n   *\n   * @remarks\n   * It's generally recommended to not wait for a number of seconds, but instead\n   * use {@link Frame.waitForSelector}, {@link Frame.waitForXPath} or\n   * {@link Frame.waitForFunction} to wait for exactly the conditions you want.\n   *\n   * @example\n   *\n   * Wait for 1 second:\n   *\n   * ```ts\n   * await page.waitForTimeout(1000);\n   * ```\n   *\n   * @param milliseconds - the number of milliseconds to wait.\n   */\n  waitForTimeout(milliseconds) {\n    return this.mainFrame().waitForTimeout(milliseconds);\n  }\n  /**\n   * Wait for the `selector` to appear in page. If at the moment of calling the\n   * method the `selector` already exists, the method will return immediately. If\n   * the `selector` doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * This method works across navigations:\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   let currentURL;\n   *   page\n   *     .waitForSelector('img')\n   *     .then(() => console.log('First URL with image: ' + currentURL));\n   *   for (currentURL of [\n   *     'https://example.com',\n   *     'https://google.com',\n   *     'https://bbc.com',\n   *   ]) {\n   *     await page.goto(currentURL);\n   *   }\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * of an element to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when element specified by selector string\n   * is added to DOM. Resolves to `null` if waiting for hidden: `true` and\n   * selector is not found in DOM.\n   * @remarks\n   * The optional Parameter in Arguments `options` are :\n   *\n   * - `Visible`: A boolean wait for element to be present in DOM and to be\n   *   visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n   *   properties. Defaults to `false`.\n   *\n   * - `hidden`: Wait for element to not be found in the DOM or to be hidden,\n   *   i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to\n   *   `false`.\n   *\n   * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n   *   (30 seconds). Pass `0` to disable timeout. The default value can be changed\n   *   by using the {@link Page.setDefaultTimeout} method.\n   */\n  async waitForSelector(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return await this.mainFrame().waitForSelector(selector, options);\n  }\n  /**\n   * Wait for the `xpath` to appear in page. If at the moment of calling the\n   * method the `xpath` already exists, the method will return immediately. If\n   * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * This method works across navigation\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   let currentURL;\n   *   page\n   *     .waitForXPath('//img')\n   *     .then(() => console.log('First URL with image: ' + currentURL));\n   *   for (currentURL of [\n   *     'https://example.com',\n   *     'https://google.com',\n   *     'https://bbc.com',\n   *   ]) {\n   *     await page.goto(currentURL);\n   *   }\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param xpath - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n   * element to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when element specified by xpath string is\n   * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n   * not found in DOM.\n   * @remarks\n   * The optional Argument `options` have properties:\n   *\n   * - `visible`: A boolean to wait for element to be present in DOM and to be\n   *   visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n   *   properties. Defaults to `false`.\n   *\n   * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n   *   hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n   *   Defaults to `false`.\n   *\n   * - `timeout`: A number which is maximum time to wait for in milliseconds.\n   *   Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\n   *   value can be changed by using the {@link Page.setDefaultTimeout} method.\n   */\n  waitForXPath(xpath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.mainFrame().waitForXPath(xpath, options);\n  }\n  /**\n   * Waits for a function to finish evaluating in the page's context.\n   *\n   * @example\n   * The {@link Page.waitForFunction} can be used to observe viewport size change:\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   const watchDog = page.waitForFunction('window.innerWidth < 100');\n   *   await page.setViewport({width: 50, height: 50});\n   *   await watchDog;\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @example\n   * To pass arguments from node.js to the predicate of\n   * {@link Page.waitForFunction} function:\n   *\n   * ```ts\n   * const selector = '.foo';\n   * await page.waitForFunction(\n   *   selector => !!document.querySelector(selector),\n   *   {},\n   *   selector\n   * );\n   * ```\n   *\n   * @example\n   * The predicate of {@link Page.waitForFunction} can be asynchronous too:\n   *\n   * ```ts\n   * const username = 'github-username';\n   * await page.waitForFunction(\n   *   async username => {\n   *     const githubResponse = await fetch(\n   *       `https://api.github.com/users/${username}`\n   *     );\n   *     const githubUser = await githubResponse.json();\n   *     // show the avatar\n   *     const img = document.createElement('img');\n   *     img.src = githubUser.avatar_url;\n   *     // wait 3 seconds\n   *     await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n   *     img.remove();\n   *   },\n   *   {},\n   *   username\n   * );\n   * ```\n   *\n   * @param pageFunction - Function to be evaluated in browser context\n   * @param options - Options for configuring waiting behavior.\n   */\n  waitForFunction(pageFunction) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (var _len10 = arguments.length, args = new Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n      args[_key10 - 2] = arguments[_key10];\n    }\n    return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n  }\n}\n_CDPPage_closed = new WeakMap(), _CDPPage_client = new WeakMap(), _CDPPage_target = new WeakMap(), _CDPPage_keyboard = new WeakMap(), _CDPPage_mouse = new WeakMap(), _CDPPage_timeoutSettings = new WeakMap(), _CDPPage_touchscreen = new WeakMap(), _CDPPage_accessibility = new WeakMap(), _CDPPage_frameManager = new WeakMap(), _CDPPage_emulationManager = new WeakMap(), _CDPPage_tracing = new WeakMap(), _CDPPage_pageBindings = new WeakMap(), _CDPPage_coverage = new WeakMap(), _CDPPage_javascriptEnabled = new WeakMap(), _CDPPage_viewport = new WeakMap(), _CDPPage_screenshotTaskQueue = new WeakMap(), _CDPPage_workers = new WeakMap(), _CDPPage_fileChooserPromises = new WeakMap(), _CDPPage_disconnectPromise = new WeakMap(), _CDPPage_userDragInterceptionEnabled = new WeakMap(), _CDPPage_onDetachedFromTarget = new WeakMap(), _CDPPage_onAttachedToTarget = new WeakMap(), _CDPPage_instances = new WeakSet(), _CDPPage_initialize = async function _CDPPage_initialize() {\n  try {\n    await Promise.all([__classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").initialize(), __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Performance.enable'), __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Log.enable')]);\n  } catch (err) {\n    if (isErrorLike(err) && isTargetClosedError(err)) {\n      debugError(err);\n    } else {\n      throw err;\n    }\n  }\n}, _CDPPage_onFileChooser = async function _CDPPage_onFileChooser(event) {\n  if (!__classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\").size) {\n    return;\n  }\n  const frame = __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").frame(event.frameId);\n  assert(frame, 'This should never happen.');\n  // This is guaranteed to be an HTMLInputElement handle by the event.\n  const handle = await frame.worlds[MAIN_WORLD].adoptBackendNode(event.backendNodeId);\n  const fileChooser = new FileChooser(handle, event);\n  for (const promise of __classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\")) {\n    promise.resolve(fileChooser);\n  }\n  __classPrivateFieldGet(this, _CDPPage_fileChooserPromises, \"f\").clear();\n}, _CDPPage_onTargetCrashed = function _CDPPage_onTargetCrashed() {\n  this.emit('error', new Error('Page crashed!'));\n}, _CDPPage_onLogEntryAdded = function _CDPPage_onLogEntryAdded(event) {\n  const {\n    level,\n    text,\n    args,\n    source,\n    url,\n    lineNumber\n  } = event.entry;\n  if (args) {\n    args.map(arg => {\n      return releaseObject(__classPrivateFieldGet(this, _CDPPage_client, \"f\"), arg);\n    });\n  }\n  if (source !== 'worker') {\n    this.emit(\"console\" /* PageEmittedEvents.Console */, new ConsoleMessage(level, text, [], [{\n      url,\n      lineNumber\n    }]));\n  }\n}, _CDPPage_emitMetrics = function _CDPPage_emitMetrics(event) {\n  this.emit(\"metrics\" /* PageEmittedEvents.Metrics */, {\n    title: event.title,\n    metrics: __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_buildMetricsObject).call(this, event.metrics)\n  });\n}, _CDPPage_buildMetricsObject = function _CDPPage_buildMetricsObject(metrics) {\n  const result = {};\n  for (const metric of metrics || []) {\n    if (supportedMetrics.has(metric.name)) {\n      result[metric.name] = metric.value;\n    }\n  }\n  return result;\n}, _CDPPage_handleException = function _CDPPage_handleException(exceptionDetails) {\n  const message = getExceptionMessage(exceptionDetails);\n  const err = new Error(message);\n  err.stack = ''; // Don't report clientside error with a node stack attached\n  this.emit(\"pageerror\" /* PageEmittedEvents.PageError */, err);\n}, _CDPPage_onConsoleAPI = async function _CDPPage_onConsoleAPI(event) {\n  if (event.executionContextId === 0) {\n    // DevTools protocol stores the last 1000 console messages. These\n    // messages are always reported even for removed execution contexts. In\n    // this case, they are marked with executionContextId = 0 and are\n    // reported upon enabling Runtime agent.\n    //\n    // Ignore these messages since:\n    // - there's no execution context we can use to operate with message\n    //   arguments\n    // - these messages are reported before Puppeteer clients can subscribe\n    //   to the 'console'\n    //   page event.\n    //\n    // @see https://github.com/puppeteer/puppeteer/issues/3865\n    return;\n  }\n  const context = __classPrivateFieldGet(this, _CDPPage_frameManager, \"f\").executionContextById(event.executionContextId, __classPrivateFieldGet(this, _CDPPage_client, \"f\"));\n  const values = event.args.map(arg => {\n    return createJSHandle(context, arg);\n  });\n  __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_addConsoleMessage).call(this, event.type, values, event.stackTrace);\n}, _CDPPage_onBindingCalled = async function _CDPPage_onBindingCalled(event) {\n  let payload;\n  try {\n    payload = JSON.parse(event.payload);\n  } catch {\n    // The binding was either called by something in the page or it was\n    // called before our wrapper was initialized.\n    return;\n  }\n  const {\n    type,\n    name,\n    seq,\n    args\n  } = payload;\n  if (type !== 'exposedFun' || !__classPrivateFieldGet(this, _CDPPage_pageBindings, \"f\").has(name)) {\n    return;\n  }\n  let expression = null;\n  try {\n    const pageBinding = __classPrivateFieldGet(this, _CDPPage_pageBindings, \"f\").get(name);\n    assert(pageBinding);\n    const result = await pageBinding(...args);\n    expression = pageBindingDeliverResultString(name, seq, result);\n  } catch (error) {\n    if (isErrorLike(error)) {\n      expression = pageBindingDeliverErrorString(name, seq, error.message, error.stack);\n    } else {\n      expression = pageBindingDeliverErrorValueString(name, seq, error);\n    }\n  }\n  __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Runtime.evaluate', {\n    expression,\n    contextId: event.executionContextId\n  }).catch(debugError);\n}, _CDPPage_addConsoleMessage = function _CDPPage_addConsoleMessage(eventType, args, stackTrace) {\n  if (!this.listenerCount(\"console\" /* PageEmittedEvents.Console */)) {\n    args.forEach(arg => {\n      return arg.dispose();\n    });\n    return;\n  }\n  const textTokens = [];\n  for (const arg of args) {\n    const remoteObject = arg.remoteObject();\n    if (remoteObject.objectId) {\n      textTokens.push(arg.toString());\n    } else {\n      textTokens.push(valueFromRemoteObject(remoteObject));\n    }\n  }\n  const stackTraceLocations = [];\n  if (stackTrace) {\n    for (const callFrame of stackTrace.callFrames) {\n      stackTraceLocations.push({\n        url: callFrame.url,\n        lineNumber: callFrame.lineNumber,\n        columnNumber: callFrame.columnNumber\n      });\n    }\n  }\n  const message = new ConsoleMessage(eventType, textTokens.join(' '), args, stackTraceLocations);\n  this.emit(\"console\" /* PageEmittedEvents.Console */, message);\n}, _CDPPage_onDialog = function _CDPPage_onDialog(event) {\n  let dialogType = null;\n  const validDialogTypes = new Set(['alert', 'confirm', 'prompt', 'beforeunload']);\n  if (validDialogTypes.has(event.type)) {\n    dialogType = event.type;\n  }\n  assert(dialogType, 'Unknown javascript dialog type: ' + event.type);\n  const dialog = new Dialog(__classPrivateFieldGet(this, _CDPPage_client, \"f\"), dialogType, event.message, event.defaultPrompt);\n  this.emit(\"dialog\" /* PageEmittedEvents.Dialog */, dialog);\n}, _CDPPage_resetDefaultBackgroundColor =\n/**\n * Resets default white background\n */\nasync function _CDPPage_resetDefaultBackgroundColor() {\n  await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setDefaultBackgroundColorOverride');\n}, _CDPPage_setTransparentBackgroundColor =\n/**\n * Hides default white background\n */\nasync function _CDPPage_setTransparentBackgroundColor() {\n  await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setDefaultBackgroundColorOverride', {\n    color: {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0\n    }\n  });\n}, _CDPPage_sessionClosePromise = function _CDPPage_sessionClosePromise() {\n  if (!__classPrivateFieldGet(this, _CDPPage_disconnectPromise, \"f\")) {\n    __classPrivateFieldSet(this, _CDPPage_disconnectPromise, new Promise(fulfill => {\n      return __classPrivateFieldGet(this, _CDPPage_client, \"f\").once(CDPSessionEmittedEvents.Disconnected, () => {\n        return fulfill(new Error('Target closed'));\n      });\n    }), \"f\");\n  }\n  return __classPrivateFieldGet(this, _CDPPage_disconnectPromise, \"f\");\n}, _CDPPage_go = async function _CDPPage_go(delta, options) {\n  const history = await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.getNavigationHistory');\n  const entry = history.entries[history.currentIndex + delta];\n  if (!entry) {\n    return null;\n  }\n  const result = await Promise.all([this.waitForNavigation(options), __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.navigateToHistoryEntry', {\n    entryId: entry.id\n  })]);\n  return result[0];\n}, _CDPPage_screenshotTask = async function _CDPPage_screenshotTask(format) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Target.activateTarget', {\n    targetId: __classPrivateFieldGet(this, _CDPPage_target, \"f\")._targetId\n  });\n  let clip = options.clip ? processClip(options.clip) : undefined;\n  const captureBeyondViewport = typeof options.captureBeyondViewport === 'boolean' ? options.captureBeyondViewport : true;\n  const fromSurface = typeof options.fromSurface === 'boolean' ? options.fromSurface : undefined;\n  if (options.fullPage) {\n    const metrics = await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.getLayoutMetrics');\n    // Fallback to `contentSize` in case of using Firefox.\n    const {\n      width,\n      height\n    } = metrics.cssContentSize || metrics.contentSize;\n    // Overwrite clip for full page.\n    clip = {\n      x: 0,\n      y: 0,\n      width,\n      height,\n      scale: 1\n    };\n    if (!captureBeyondViewport) {\n      const {\n        isMobile = false,\n        deviceScaleFactor = 1,\n        isLandscape = false\n      } = __classPrivateFieldGet(this, _CDPPage_viewport, \"f\") || {};\n      const screenOrientation = isLandscape ? {\n        angle: 90,\n        type: 'landscapePrimary'\n      } : {\n        angle: 0,\n        type: 'portraitPrimary'\n      };\n      await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Emulation.setDeviceMetricsOverride', {\n        mobile: isMobile,\n        width,\n        height,\n        deviceScaleFactor,\n        screenOrientation\n      });\n    }\n  }\n  const shouldSetDefaultBackground = options.omitBackground && (format === 'png' || format === 'webp');\n  if (shouldSetDefaultBackground) {\n    await __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_setTransparentBackgroundColor).call(this);\n  }\n  const result = await __classPrivateFieldGet(this, _CDPPage_client, \"f\").send('Page.captureScreenshot', {\n    format,\n    quality: options.quality,\n    clip: clip ? {\n      ...clip,\n      scale: clip.scale === undefined ? 1 : clip.scale\n    } : undefined,\n    captureBeyondViewport,\n    fromSurface\n  });\n  if (shouldSetDefaultBackground) {\n    await __classPrivateFieldGet(this, _CDPPage_instances, \"m\", _CDPPage_resetDefaultBackgroundColor).call(this);\n  }\n  if (options.fullPage && __classPrivateFieldGet(this, _CDPPage_viewport, \"f\")) {\n    await this.setViewport(__classPrivateFieldGet(this, _CDPPage_viewport, \"f\"));\n  }\n  const buffer = options.encoding === 'base64' ? result.data : Buffer.from(result.data, 'base64');\n  if (options.path) {\n    try {\n      const fs = (await importFS()).promises;\n      await fs.writeFile(options.path, buffer);\n    } catch (error) {\n      if (error instanceof TypeError) {\n        throw new Error('Screenshots can only be written to a file path in a Node-like environment.');\n      }\n      throw error;\n    }\n  }\n  return buffer;\n  function processClip(clip) {\n    const x = Math.round(clip.x);\n    const y = Math.round(clip.y);\n    const width = Math.round(clip.width + clip.x - x);\n    const height = Math.round(clip.height + clip.y - y);\n    return {\n      x,\n      y,\n      width,\n      height,\n      scale: clip.scale\n    };\n  }\n};\nconst supportedMetrics = new Set(['Timestamp', 'Documents', 'Frames', 'JSEventListeners', 'Nodes', 'LayoutCount', 'RecalcStyleCount', 'LayoutDuration', 'RecalcStyleDuration', 'ScriptDuration', 'TaskDuration', 'JSHeapUsedSize', 'JSHeapTotalSize']);\nconst unitToPixels = {\n  px: 1,\n  in: 96,\n  cm: 37.8,\n  mm: 3.78\n};\nfunction convertPrintParameterToInches(parameter) {\n  if (typeof parameter === 'undefined') {\n    return undefined;\n  }\n  let pixels;\n  if (isNumber(parameter)) {\n    // Treat numbers as pixel values to be aligned with phantom's paperSize.\n    pixels = parameter;\n  } else if (isString(parameter)) {\n    const text = parameter;\n    let unit = text.substring(text.length - 2).toLowerCase();\n    let valueText = '';\n    if (unit in unitToPixels) {\n      valueText = text.substring(0, text.length - 2);\n    } else {\n      // In case of unknown unit try to parse the whole parameter as number of pixels.\n      // This is consistent with phantom's paperSize behavior.\n      unit = 'px';\n      valueText = text;\n    }\n    const value = Number(valueText);\n    assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n    pixels = value * unitToPixels[unit];\n  } else {\n    throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n  }\n  return pixels / 96;\n}","map":{"version":3,"mappings":"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","names":["Page","assert","createDeferredPromise","isErrorLike","Accessibility","CDPSessionEmittedEvents","isTargetClosedError","ConsoleMessage","Coverage","Dialog","EmulationManager","FileChooser","FrameManager","FrameManagerEmittedEvents","Keyboard","Mouse","Touchscreen","MAIN_WORLD","NetworkManagerEmittedEvents","_paperFormats","TimeoutSettings","Tracing","createJSHandle","debugError","evaluationString","getExceptionMessage","getReadableAsBuffer","getReadableFromProtocolStream","importFS","isNumber","isString","pageBindingDeliverErrorString","pageBindingDeliverErrorValueString","pageBindingDeliverResultString","pageBindingInitString","releaseObject","valueFromRemoteObject","waitForEvent","waitWithTimeout","WebWorker","CDPPage","constructor","client","target","ignoreHTTPSErrors","screenshotTaskQueue","_CDPPage_closed","_CDPPage_client","_CDPPage_target","_CDPPage_keyboard","_CDPPage_mouse","_CDPPage_timeoutSettings","_CDPPage_touchscreen","_CDPPage_accessibility","_CDPPage_frameManager","_CDPPage_emulationManager","_CDPPage_tracing","_CDPPage_pageBindings","Map","_CDPPage_coverage","_CDPPage_javascriptEnabled","_CDPPage_viewport","_CDPPage_screenshotTaskQueue","_CDPPage_workers","_CDPPage_fileChooserPromises","Set","_CDPPage_disconnectPromise","_CDPPage_userDragInterceptionEnabled","_CDPPage_onDetachedFromTarget","sessionId","_session","id","__classPrivateFieldGet","onDetachedFromTarget","worker","get","delete","emit","_CDPPage_onAttachedToTarget","createdTarget","onAttachedToTarget","_getTargetInfo","type","session","url","bind","set","_targetManager","addTargetInterceptor","__classPrivateFieldSet","on","FrameAttached","event","FrameDetached","FrameNavigated","networkManager","Request","RequestServedFromCache","Response","RequestFailed","RequestFinished","exception","exceptionDetails","_isClosedPromise","then","removeTargetInterceptor","off","_create","defaultViewport","page","setViewport","err","isDragInterceptionEnabled","isJavaScriptEnabled","waitForFileChooser","options","needsEnable","size","timeout","promise","message","add","enablePromise","send","enabled","Promise","all","result","catch","error","setGeolocation","longitude","latitude","accuracy","Error","_client","browser","browserContext","mainFrame","keyboard","touchscreen","coverage","tracing","accessibility","frames","workers","Array","from","values","setRequestInterception","value","setDragInterception","setOfflineMode","emulateNetworkConditions","networkConditions","setDefaultNavigationTimeout","setDefaultTimeout","getDefaultTimeout","$","selector","$$","evaluateHandle","pageFunction","context","executionContext","args","queryObjects","prototypeHandle","disposed","remoteObject","objectId","response","prototypeObjectId","objects","$eval","$$eval","$x","expression","cookies","urls","originalCookies","length","unsupportedCookieAttributes","filterUnsupportedAttributes","cookie","attr","map","deleteCookie","pageURL","item","Object","assign","startsWith","setCookie","startsWithHTTP","items","name","String","prototype","call","addScriptTag","addStyleTag","exposeFunction","pptrFunction","has","exposedFunction","default","source","frame","evaluate","authenticate","credentials","setExtraHTTPHeaders","headers","setUserAgent","userAgent","userAgentMetadata","metrics","content","setContent","html","goto","reload","waitForNavigation","waitForRequest","urlOrPredicate","request","waitForResponse","waitForNetworkIdle","idleTime","idleResolveCallback","idlePromise","resolve","abortRejectCallback","abortPromise","_","reject","idleTimer","onIdle","cleanup","clearTimeout","numRequestsInProgress","setTimeout","eventHandler","listenToEvent","eventPromises","race","r","waitForFrame","predicate","eventRace","goBack","goForward","bringToFront","setJavaScriptEnabled","setBypassCSP","emulateMediaType","undefined","media","emulateCPUThrottling","factor","rate","emulateMediaFeatures","features","isArray","mediaFeature","test","emulateTimezone","timezoneId","includes","emulateIdleState","overrides","isUserActive","isScreenUnlocked","emulateVisionDeficiency","visionDeficiencies","viewport","needsReload","emulateViewport","evaluateOnNewDocument","setCacheEnabled","screenshot","screenshotType","path","filePath","extension","slice","lastIndexOf","toLowerCase","quality","Number","isInteger","clip","fullPage","x","y","width","height","postTask","createPDFStream","scale","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","landscape","pageRanges","preferCSSPageSize","margin","omitBackground","paperWidth","paperHeight","format","convertPrintParameterToInches","marginTop","top","marginLeft","left","marginBottom","bottom","marginRight","right","printCommandPromise","transferMode","stream","pdf","readable","buffer","title","close","runBeforeUnload","connection","targetId","_targetId","isClosed","mouse","click","focus","hover","select","tap","text","waitForTimeout","milliseconds","waitForSelector","waitForXPath","xpath","waitForFunction","_CDPPage_initialize","initialize","_CDPPage_onFileChooser","frameId","handle","worlds","adoptBackendNode","backendNodeId","fileChooser","clear","level","lineNumber","entry","arg","metric","supportedMetrics","stack","_CDPPage_onConsoleAPI","executionContextId","executionContextById","stackTrace","_CDPPage_onBindingCalled","payload","JSON","parse","seq","pageBinding","contextId","eventType","listenerCount","forEach","dispose","textTokens","push","toString","stackTraceLocations","callFrame","callFrames","columnNumber","join","dialogType","validDialogTypes","dialog","defaultPrompt","_CDPPage_resetDefaultBackgroundColor","_CDPPage_setTransparentBackgroundColor","color","g","b","a","fulfill","once","Disconnected","_CDPPage_go","delta","history","entries","currentIndex","entryId","_CDPPage_screenshotTask","processClip","captureBeyondViewport","fromSurface","cssContentSize","contentSize","isMobile","deviceScaleFactor","isLandscape","screenOrientation","angle","mobile","shouldSetDefaultBackground","encoding","data","Buffer","fs","promises","writeFile","TypeError","Math","round","unitToPixels","px","in","cm","mm","parameter","pixels","unit","substring","valueText","isNaN"],"sources":["../../../../src/common/Page.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}