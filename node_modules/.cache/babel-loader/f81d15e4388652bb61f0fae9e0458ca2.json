{"ast":null,"code":"import { _connectToCDPBrowser } from './BrowserConnector.js';\nimport { clearCustomQueryHandlers, customQueryHandlerNames, registerCustomQueryHandler, unregisterCustomQueryHandler } from './QueryHandler.js';\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\nexport class Puppeteer {\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    /**\n     * @internal\n     */\n    this._changedProduct = false;\n    this._isPuppeteerCore = settings.isPuppeteerCore;\n    this.connect = this.connect.bind(this);\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is only\n   * allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```\n   * puppeteer.registerCustomQueryHandler('text', { … });\n   * const aHandle = await page.$('text/…');\n   * ```\n   *\n   * @param name - The name that the custom query handler will be registered\n   * under.\n   * @param queryHandler - The {@link CustomQueryHandler | custom query handler}\n   * to register.\n   *\n   * @public\n   */\n  static registerCustomQueryHandler(name, queryHandler) {\n    return registerCustomQueryHandler(name, queryHandler);\n  }\n  /**\n   * Unregisters a custom query handler for a given name.\n   */\n  static unregisterCustomQueryHandler(name) {\n    return unregisterCustomQueryHandler(name);\n  }\n  /**\n   * Gets the names of all custom query handlers.\n   */\n  static customQueryHandlerNames() {\n    return customQueryHandlerNames();\n  }\n  /**\n   * Unregisters all custom query handlers.\n   */\n  static clearCustomQueryHandlers() {\n    return clearCustomQueryHandlers();\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @remarks\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return _connectToCDPBrowser(options);\n  }\n}","map":{"version":3,"mappings":"AAgBA,SAEEA,oBAAoB,QACf,uBAAuB;AAE9B,SACEC,wBAAwB,EAExBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,4BAA4B,QACvB,mBAAmB;AAmB1B;;;;;;;;;AASA,OAAM,MAAOC,SAAS;EA4DpB;;;EAGAC,YAAYC,QAAiC;IAR7C;;;IAGU,oBAAe,GAAG,KAAK;IAM/B,IAAI,CAACC,gBAAgB,GAAGD,QAAQ,CAACE,eAAe;IAEhD,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EACxC;EAlEA;;;;;;;;;;;;;;;;;;;;;;EAsBA,OAAOR,0BAA0B,CAC/BS,IAAY,EACZC,YAAgC;IAEhC,OAAOV,0BAA0B,CAACS,IAAI,EAAEC,YAAY,CAAC;EACvD;EAEA;;;EAGA,OAAOT,4BAA4B,CAACQ,IAAY;IAC9C,OAAOR,4BAA4B,CAACQ,IAAI,CAAC;EAC3C;EAEA;;;EAGA,OAAOV,uBAAuB;IAC5B,OAAOA,uBAAuB,EAAE;EAClC;EAEA;;;EAGA,OAAOD,wBAAwB;IAC7B,OAAOA,wBAAwB,EAAE;EACnC;EAoBA;;;;;;;;EAQAS,OAAO,CAACI,OAAuB;IAC7B,OAAOd,oBAAoB,CAACc,OAAO,CAAC;EACtC","names":["_connectToCDPBrowser","clearCustomQueryHandlers","customQueryHandlerNames","registerCustomQueryHandler","unregisterCustomQueryHandler","Puppeteer","constructor","settings","_isPuppeteerCore","isPuppeteerCore","connect","bind","name","queryHandler","options"],"sources":["../../../../src/common/Puppeteer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}