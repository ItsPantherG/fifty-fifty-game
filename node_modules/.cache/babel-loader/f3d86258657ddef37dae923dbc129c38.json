{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ElementHandle_instances, _ElementHandle_frame, _ElementHandle_frameManager_get, _ElementHandle_page_get, _ElementHandle_scrollIntoViewIfNeeded, _ElementHandle_getOOPIFOffsets, _ElementHandle_getBoxModel, _ElementHandle_fromProtocolQuad, _ElementHandle_intersectQuadWithViewport;\nimport { assert } from '../util/assert.js';\nimport { JSHandle } from './JSHandle.js';\nimport { getQueryHandlerAndSelector } from './QueryHandler.js';\nimport { debugError, isString } from './util.js';\nconst applyOffsetsToQuad = (quad, offsetX, offsetY) => {\n  return quad.map(part => {\n    return {\n      x: part.x + offsetX,\n      y: part.y + offsetY\n    };\n  });\n};\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```ts\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   const hrefElement = await page.$('a');\n *   await hrefElement.click();\n *   // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\nexport class ElementHandle extends JSHandle {\n  /**\n   * @internal\n   */\n  constructor(context, remoteObject, frame) {\n    super(context, remoteObject);\n    _ElementHandle_instances.add(this);\n    _ElementHandle_frame.set(this, void 0);\n    __classPrivateFieldSet(this, _ElementHandle_frame, frame, \"f\");\n  }\n  get frame() {\n    return __classPrivateFieldGet(this, _ElementHandle_frame, \"f\");\n  }\n  /**\n   * Queries the current element for an element matching the given selector.\n   *\n   * @param selector - The selector to query for.\n   * @returns A {@link ElementHandle | element handle} to the first element\n   * matching the given selector. Otherwise, `null`.\n   */\n  async $(selector) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = getQueryHandlerAndSelector(selector);\n    assert(queryHandler.queryOne, 'Cannot handle queries for a single element with the given selector');\n    return await queryHandler.queryOne(this, updatedSelector);\n  }\n  /**\n   * Queries the current element for all elements matching the given selector.\n   *\n   * @param selector - The selector to query for.\n   * @returns An array of {@link ElementHandle | element handles} that point to\n   * elements matching the given selector.\n   */\n  async $$(selector) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = getQueryHandlerAndSelector(selector);\n    assert(queryHandler.queryAll, 'Cannot handle queries for a multiple element with the given selector');\n    return await queryHandler.queryAll(this, updatedSelector);\n  }\n  /**\n   * Runs the given function on the first element matching the given selector in\n   * the current element.\n   *\n   * If the given function returns a promise, then this method will wait till\n   * the promise resolves.\n   *\n   * @example\n   *\n   * ```ts\n   * const tweetHandle = await page.$('.tweet');\n   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe(\n   *   '100'\n   * );\n   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe(\n   *   '10'\n   * );\n   * ```\n   *\n   * @param selector - The selector to query for.\n   * @param pageFunction - The function to be evaluated in this element's page's\n   * context. The first element matching the selector will be passed in as the\n   * first argument.\n   * @param args - Additional arguments to pass to `pageFunction`.\n   * @returns A promise to the result of the function.\n   */\n  async $eval(selector, pageFunction) {\n    const elementHandle = await this.$(selector);\n    if (!elementHandle) {\n      throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n    }\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    const result = await elementHandle.evaluate(pageFunction, ...args);\n    await elementHandle.dispose();\n    return result;\n  }\n  /**\n   * Runs the given function on an array of elements matching the given selector\n   * in the current element.\n   *\n   * If the given function returns a promise, then this method will wait till\n   * the promise resolves.\n   *\n   * @example\n   * HTML:\n   *\n   * ```html\n   * <div class=\"feed\">\n   *   <div class=\"tweet\">Hello!</div>\n   *   <div class=\"tweet\">Hi!</div>\n   * </div>\n   * ```\n   *\n   * JavaScript:\n   *\n   * ```js\n   * const feedHandle = await page.$('.feed');\n   * expect(\n   *   await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText))\n   * ).toEqual(['Hello!', 'Hi!']);\n   * ```\n   *\n   * @param selector - The selector to query for.\n   * @param pageFunction - The function to be evaluated in the element's page's\n   * context. An array of elements matching the given selector will be passed to\n   * the function as its first argument.\n   * @param args - Additional arguments to pass to `pageFunction`.\n   * @returns A promise to the result of the function.\n   */\n  async $$eval(selector, pageFunction) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = getQueryHandlerAndSelector(selector);\n    assert(queryHandler.queryAll, 'Cannot handle queries for a multiple element with the given selector');\n    const handles = await queryHandler.queryAll(this, updatedSelector);\n    const elements = await this.evaluateHandle(function (_) {\n      for (var _len3 = arguments.length, elements = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        elements[_key3 - 1] = arguments[_key3];\n      }\n      return elements;\n    }, ...handles);\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    const [result] = await Promise.all([elements.evaluate(pageFunction, ...args), ...handles.map(handle => {\n      return handle.dispose();\n    })]);\n    await elements.dispose();\n    return result;\n  }\n  /**\n   * @deprecated Use {@link ElementHandle.$$} with the `xpath` prefix.\n   *\n   * Example: `await elementHandle.$$('xpath/' + xpathExpression)`\n   *\n   * The method evaluates the XPath expression relative to the elementHandle.\n   * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n   * automatically.\n   *\n   * If there are no such elements, the method will resolve to an empty array.\n   * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n   */\n  async $x(expression) {\n    if (expression.startsWith('//')) {\n      expression = `.${expression}`;\n    }\n    return this.$$(`xpath/${expression}`);\n  }\n  /**\n   * Wait for an element matching the given selector to appear in the current\n   * element.\n   *\n   * Unlike {@link Frame.waitForSelector}, this method does not work across\n   * navigations or if the element is detached from DOM.\n   *\n   * @example\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   let currentURL;\n   *   page\n   *     .mainFrame()\n   *     .waitForSelector('img')\n   *     .then(() => console.log('First URL with image: ' + currentURL));\n   *\n   *   for (currentURL of [\n   *     'https://example.com',\n   *     'https://google.com',\n   *     'https://bbc.com',\n   *   ]) {\n   *     await page.goto(currentURL);\n   *   }\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param selector - The selector to query and wait for.\n   * @param options - Options for customizing waiting behavior.\n   * @returns An element matching the given selector.\n   * @throws Throws if an element matching the given selector doesn't appear.\n   */\n  async waitForSelector(selector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      updatedSelector,\n      queryHandler\n    } = getQueryHandlerAndSelector(selector);\n    assert(queryHandler.waitFor, 'Query handler does not support waiting');\n    return await queryHandler.waitFor(this, updatedSelector, options);\n  }\n  /**\n   * @deprecated Use {@link ElementHandle.waitForSelector} with the `xpath`\n   * prefix.\n   *\n   * Example: `await elementHandle.waitForSelector('xpath/' + xpathExpression)`\n   *\n   * The method evaluates the XPath expression relative to the elementHandle.\n   *\n   * Wait for the `xpath` within the element. If at the moment of calling the\n   * method the `xpath` already exists, the method will return immediately. If\n   * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * If `xpath` starts with `//` instead of `.//`, the dot will be appended\n   * automatically.\n   *\n   * This method works across navigation.\n   *\n   * ```ts\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   let currentURL;\n   *   page\n   *     .waitForXPath('//img')\n   *     .then(() => console.log('First URL with image: ' + currentURL));\n   *   for (currentURL of [\n   *     'https://example.com',\n   *     'https://google.com',\n   *     'https://bbc.com',\n   *   ]) {\n   *     await page.goto(currentURL);\n   *   }\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param xpath - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n   * element to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when element specified by xpath string is\n   * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n   * not found in DOM.\n   * @remarks\n   * The optional Argument `options` have properties:\n   *\n   * - `visible`: A boolean to wait for element to be present in DOM and to be\n   *   visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n   *   properties. Defaults to `false`.\n   *\n   * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n   *   hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n   *   Defaults to `false`.\n   *\n   * - `timeout`: A number which is maximum time to wait for in milliseconds.\n   *   Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The\n   *   default value can be changed by using the {@link Page.setDefaultTimeout}\n   *   method.\n   */\n  async waitForXPath(xpath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (xpath.startsWith('//')) {\n      xpath = `.${xpath}`;\n    }\n    return this.waitForSelector(`xpath/${xpath}`, options);\n  }\n  asElement() {\n    return this;\n  }\n  /**\n   * Resolves to the content frame for element handles referencing\n   * iframe nodes, or null otherwise\n   */\n  async contentFrame() {\n    const nodeInfo = await this.client.send('DOM.describeNode', {\n      objectId: this.remoteObject().objectId\n    });\n    if (typeof nodeInfo.node.frameId !== 'string') {\n      return null;\n    }\n    return __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_frameManager_get).frame(nodeInfo.node.frameId);\n  }\n  /**\n   * Returns the middle point within an element unless a specific offset is provided.\n   */\n  async clickablePoint(offset) {\n    const [result, layoutMetrics] = await Promise.all([this.client.send('DOM.getContentQuads', {\n      objectId: this.remoteObject().objectId\n    }).catch(debugError), __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get)._client().send('Page.getLayoutMetrics')]);\n    if (!result || !result.quads.length) {\n      throw new Error('Node is either not clickable or not an HTMLElement');\n    }\n    // Filter out quads that have too small area to click into.\n    // Fallback to `layoutViewport` in case of using Firefox.\n    const {\n      clientWidth,\n      clientHeight\n    } = layoutMetrics.cssLayoutViewport || layoutMetrics.layoutViewport;\n    const {\n      offsetX,\n      offsetY\n    } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n    const quads = result.quads.map(quad => {\n      return __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, quad);\n    }).map(quad => {\n      return applyOffsetsToQuad(quad, offsetX, offsetY);\n    }).map(quad => {\n      return __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_intersectQuadWithViewport).call(this, quad, clientWidth, clientHeight);\n    }).filter(quad => {\n      return computeQuadArea(quad) > 1;\n    });\n    if (!quads.length) {\n      throw new Error('Node is either not clickable or not an HTMLElement');\n    }\n    const quad = quads[0];\n    if (offset) {\n      // Return the point of the first quad identified by offset.\n      let minX = Number.MAX_SAFE_INTEGER;\n      let minY = Number.MAX_SAFE_INTEGER;\n      for (const point of quad) {\n        if (point.x < minX) {\n          minX = point.x;\n        }\n        if (point.y < minY) {\n          minY = point.y;\n        }\n      }\n      if (minX !== Number.MAX_SAFE_INTEGER && minY !== Number.MAX_SAFE_INTEGER) {\n        return {\n          x: minX + offset.x,\n          y: minY + offset.y\n        };\n      }\n    }\n    // Return the middle point of the first quad.\n    let x = 0;\n    let y = 0;\n    for (const point of quad) {\n      x += point.x;\n      y += point.y;\n    }\n    return {\n      x: x / 4,\n      y: y / 4\n    };\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to hover over the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  async hover() {\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const {\n      x,\n      y\n    } = await this.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.move(x, y);\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to click in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  async click() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const {\n      x,\n      y\n    } = await this.clickablePoint(options.offset);\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.click(x, y, options);\n  }\n  /**\n   * This method creates and captures a dragevent from the element.\n   */\n  async drag(target) {\n    assert(__classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).isDragInterceptionEnabled(), 'Drag Interception is not enabled!');\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const start = await this.clickablePoint();\n    return await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.drag(start, target);\n  }\n  /**\n   * This method creates a `dragenter` event on the element.\n   */\n  async dragEnter() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      items: [],\n      dragOperationsMask: 1\n    };\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const target = await this.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.dragEnter(target, data);\n  }\n  /**\n   * This method creates a `dragover` event on the element.\n   */\n  async dragOver() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      items: [],\n      dragOperationsMask: 1\n    };\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const target = await this.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.dragOver(target, data);\n  }\n  /**\n   * This method triggers a drop on the element.\n   */\n  async drop() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      items: [],\n      dragOperationsMask: 1\n    };\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const destination = await this.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.drop(destination, data);\n  }\n  /**\n   * This method triggers a dragenter, dragover, and drop on the element.\n   */\n  async dragAndDrop(target, options) {\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const startPoint = await this.clickablePoint();\n    const targetPoint = await target.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).mouse.dragAndDrop(startPoint, targetPoint, options);\n  }\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been\n   * selected. If there's no `<select>` element matching `selector`, the method\n   * throws an error.\n   *\n   * @example\n   *\n   * ```ts\n   * handle.select('blue'); // single selection\n   * handle.select('red', 'green', 'blue'); // multiple selections\n   * ```\n   *\n   * @param values - Values of options to select. If the `<select>` has the\n   * `multiple` attribute, all values are considered, otherwise only the first\n   * one is taken into account.\n   */\n  async select() {\n    for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      values[_key4] = arguments[_key4];\n    }\n    for (const value of values) {\n      assert(isString(value), 'Values must be strings. Found value \"' + value + '\" of type \"' + typeof value + '\"');\n    }\n    return this.evaluate((element, vals) => {\n      const values = new Set(vals);\n      if (!(element instanceof HTMLSelectElement)) {\n        throw new Error('Element is not a <select> element.');\n      }\n      const selectedValues = new Set();\n      if (!element.multiple) {\n        for (const option of element.options) {\n          option.selected = false;\n        }\n        for (const option of element.options) {\n          if (values.has(option.value)) {\n            option.selected = true;\n            selectedValues.add(option.value);\n            break;\n          }\n        }\n      } else {\n        for (const option of element.options) {\n          option.selected = values.has(option.value);\n          if (option.selected) {\n            selectedValues.add(option.value);\n          }\n        }\n      }\n      element.dispatchEvent(new Event('input', {\n        bubbles: true\n      }));\n      element.dispatchEvent(new Event('change', {\n        bubbles: true\n      }));\n      return [...selectedValues.values()];\n    }, values);\n  }\n  /**\n   * This method expects `elementHandle` to point to an\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n   *\n   * @param filePaths - Sets the value of the file input to these paths.\n   * If a path is relative, then it is resolved against the\n   * {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   * Note for locals script connecting to remote chrome environments,\n   * paths must be absolute.\n   */\n  async uploadFile() {\n    const isMultiple = await this.evaluate(element => {\n      return element.multiple;\n    });\n    for (var _len5 = arguments.length, filePaths = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      filePaths[_key5] = arguments[_key5];\n    }\n    assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n    // Locate all files and confirm that they exist.\n    let path;\n    try {\n      path = await import('path');\n    } catch (error) {\n      if (error instanceof TypeError) {\n        throw new Error(`JSHandle#uploadFile can only be used in Node-like environments.`);\n      }\n      throw error;\n    }\n    const files = filePaths.map(filePath => {\n      if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n        return filePath;\n      } else {\n        return path.resolve(filePath);\n      }\n    });\n    const {\n      objectId\n    } = this.remoteObject();\n    const {\n      node\n    } = await this.client.send('DOM.describeNode', {\n      objectId\n    });\n    const {\n      backendNodeId\n    } = node;\n    /*  The zero-length array is a special case, it seems that\n         DOM.setFileInputFiles does not actually update the files in that case,\n         so the solution is to eval the element value to a new FileList directly.\n     */\n    if (files.length === 0) {\n      await this.evaluate(element => {\n        element.files = new DataTransfer().files;\n        // Dispatch events for this case because it should behave akin to a user action.\n        element.dispatchEvent(new Event('input', {\n          bubbles: true\n        }));\n        element.dispatchEvent(new Event('change', {\n          bubbles: true\n        }));\n      });\n    } else {\n      await this.client.send('DOM.setFileInputFiles', {\n        objectId,\n        files,\n        backendNodeId\n      });\n    }\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Touchscreen.tap} to tap in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  async tap() {\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    const {\n      x,\n      y\n    } = await this.clickablePoint();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).touchscreen.tap(x, y);\n  }\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n   */\n  async focus() {\n    await this.evaluate(element => {\n      if (!(element instanceof HTMLElement)) {\n        throw new Error('Cannot focus non-HTMLElement');\n      }\n      return element.focus();\n    });\n  }\n  /**\n   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n   * `keyup` event for each character in the text.\n   *\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link ElementHandle.press}.\n   *\n   * @example\n   *\n   * ```ts\n   * await elementHandle.type('Hello'); // Types instantly\n   * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @example\n   * An example of typing into a text field and then submitting the form:\n   *\n   * ```ts\n   * const elementHandle = await page.$('input');\n   * await elementHandle.type('some text');\n   * await elementHandle.press('Enter');\n   * ```\n   */\n  async type(text, options) {\n    await this.focus();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).keyboard.type(text, options);\n  }\n  /**\n   * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also be generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n   * will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   */\n  async press(key, options) {\n    await this.focus();\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).keyboard.press(key, options);\n  }\n  /**\n   * This method returns the bounding box of the element (relative to the main frame),\n   * or `null` if the element is not visible.\n   */\n  async boundingBox() {\n    const result = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getBoxModel).call(this);\n    if (!result) {\n      return null;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n    const quad = result.model.border;\n    const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n    const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n    const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n    const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n    return {\n      x: x + offsetX,\n      y: y + offsetY,\n      width,\n      height\n    };\n  }\n  /**\n   * This method returns boxes of the element, or `null` if the element is not visible.\n   *\n   * @remarks\n   *\n   * Boxes are represented as an array of points;\n   * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n   */\n  async boxModel() {\n    const result = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getBoxModel).call(this);\n    if (!result) {\n      return null;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n    const {\n      content,\n      padding,\n      border,\n      margin,\n      width,\n      height\n    } = result.model;\n    return {\n      content: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, content), offsetX, offsetY),\n      padding: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, padding), offsetX, offsetY),\n      border: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, border), offsetX, offsetY),\n      margin: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, margin), offsetX, offsetY),\n      width,\n      height\n    };\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Page.screenshot} to take a screenshot of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  async screenshot() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let needsViewportReset = false;\n    let boundingBox = await this.boundingBox();\n    assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n    const viewport = __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).viewport();\n    if (viewport && (boundingBox.width > viewport.width || boundingBox.height > viewport.height)) {\n      const newViewport = {\n        width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n        height: Math.max(viewport.height, Math.ceil(boundingBox.height))\n      };\n      await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).setViewport(Object.assign({}, viewport, newViewport));\n      needsViewportReset = true;\n    }\n    await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n    boundingBox = await this.boundingBox();\n    assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n    assert(boundingBox.width !== 0, 'Node has 0 width.');\n    assert(boundingBox.height !== 0, 'Node has 0 height.');\n    const layoutMetrics = await this.client.send('Page.getLayoutMetrics');\n    // Fallback to `layoutViewport` in case of using Firefox.\n    const {\n      pageX,\n      pageY\n    } = layoutMetrics.cssVisualViewport || layoutMetrics.layoutViewport;\n    const clip = Object.assign({}, boundingBox);\n    clip.x += pageX;\n    clip.y += pageY;\n    const imageData = await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).screenshot(Object.assign({}, {\n      clip\n    }, options));\n    if (needsViewportReset && viewport) {\n      await __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).setViewport(viewport);\n    }\n    return imageData;\n  }\n  /**\n   * Resolves to true if the element is visible in the current viewport.\n   */\n  async isIntersectingViewport(options) {\n    const {\n      threshold = 0\n    } = options !== null && options !== void 0 ? options : {};\n    return await this.evaluate(async (element, threshold) => {\n      const visibleRatio = await new Promise(resolve => {\n        const observer = new IntersectionObserver(entries => {\n          resolve(entries[0].intersectionRatio);\n          observer.disconnect();\n        });\n        observer.observe(element);\n      });\n      return threshold === 1 ? visibleRatio === 1 : visibleRatio > threshold;\n    }, threshold);\n  }\n}\n_ElementHandle_frame = new WeakMap(), _ElementHandle_instances = new WeakSet(), _ElementHandle_frameManager_get = function _ElementHandle_frameManager_get() {\n  return __classPrivateFieldGet(this, _ElementHandle_frame, \"f\")._frameManager;\n}, _ElementHandle_page_get = function _ElementHandle_page_get() {\n  return __classPrivateFieldGet(this, _ElementHandle_frame, \"f\").page();\n}, _ElementHandle_scrollIntoViewIfNeeded = async function _ElementHandle_scrollIntoViewIfNeeded() {\n  const error = await this.evaluate(async element => {\n    if (!element.isConnected) {\n      return 'Node is detached from document';\n    }\n    if (element.nodeType !== Node.ELEMENT_NODE) {\n      return 'Node is not of type HTMLElement';\n    }\n    return;\n  });\n  if (error) {\n    throw new Error(error);\n  }\n  try {\n    await this.client.send('DOM.scrollIntoViewIfNeeded', {\n      objectId: this.remoteObject().objectId\n    });\n  } catch (_err) {\n    // Fallback to Element.scrollIntoView if DOM.scrollIntoViewIfNeeded is not supported\n    await this.evaluate(async (element, pageJavascriptEnabled) => {\n      const visibleRatio = async () => {\n        return await new Promise(resolve => {\n          const observer = new IntersectionObserver(entries => {\n            resolve(entries[0].intersectionRatio);\n            observer.disconnect();\n          });\n          observer.observe(element);\n        });\n      };\n      if (!pageJavascriptEnabled || (await visibleRatio()) !== 1.0) {\n        element.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n          // @ts-expect-error Chrome still supports behavior: instant but\n          // it's not in the spec so TS shouts We don't want to make this\n          // breaking change in Puppeteer yet so we'll ignore the line.\n          behavior: 'instant'\n        });\n      }\n    }, __classPrivateFieldGet(this, _ElementHandle_instances, \"a\", _ElementHandle_page_get).isJavaScriptEnabled());\n  }\n}, _ElementHandle_getOOPIFOffsets = async function _ElementHandle_getOOPIFOffsets(frame) {\n  let offsetX = 0;\n  let offsetY = 0;\n  let currentFrame = frame;\n  while (currentFrame && currentFrame.parentFrame()) {\n    const parent = currentFrame.parentFrame();\n    if (!currentFrame.isOOPFrame() || !parent) {\n      currentFrame = parent;\n      continue;\n    }\n    const {\n      backendNodeId\n    } = await parent._client().send('DOM.getFrameOwner', {\n      frameId: currentFrame._id\n    });\n    const result = await parent._client().send('DOM.getBoxModel', {\n      backendNodeId: backendNodeId\n    });\n    if (!result) {\n      break;\n    }\n    const contentBoxQuad = result.model.content;\n    const topLeftCorner = __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, contentBoxQuad)[0];\n    offsetX += topLeftCorner.x;\n    offsetY += topLeftCorner.y;\n    currentFrame = parent;\n  }\n  return {\n    offsetX,\n    offsetY\n  };\n}, _ElementHandle_getBoxModel = function _ElementHandle_getBoxModel() {\n  const params = {\n    objectId: this.remoteObject().objectId\n  };\n  return this.client.send('DOM.getBoxModel', params).catch(error => {\n    return debugError(error);\n  });\n}, _ElementHandle_fromProtocolQuad = function _ElementHandle_fromProtocolQuad(quad) {\n  return [{\n    x: quad[0],\n    y: quad[1]\n  }, {\n    x: quad[2],\n    y: quad[3]\n  }, {\n    x: quad[4],\n    y: quad[5]\n  }, {\n    x: quad[6],\n    y: quad[7]\n  }];\n}, _ElementHandle_intersectQuadWithViewport = function _ElementHandle_intersectQuadWithViewport(quad, width, height) {\n  return quad.map(point => {\n    return {\n      x: Math.min(Math.max(point.x, 0), width),\n      y: Math.min(Math.max(point.y, 0), height)\n    };\n  });\n};\nfunction computeQuadArea(quad) {\n  /* Compute sum of all directed areas of adjacent triangles\n     https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n   */\n  let area = 0;\n  for (let i = 0; i < quad.length; ++i) {\n    const p1 = quad[i];\n    const p2 = quad[(i + 1) % quad.length];\n    area += (p1.x * p2.y - p2.x * p1.y) / 2;\n  }\n  return Math.abs(area);\n}","map":{"version":3,"mappings":"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","names":["assert","JSHandle","getQueryHandlerAndSelector","debugError","isString","applyOffsetsToQuad","quad","offsetX","offsetY","map","part","x","y","ElementHandle","constructor","context","remoteObject","frame","_ElementHandle_frame","__classPrivateFieldSet","__classPrivateFieldGet","$","selector","updatedSelector","queryHandler","queryOne","$$","queryAll","$eval","pageFunction","elementHandle","Error","args","result","evaluate","dispose","$$eval","handles","elements","evaluateHandle","_","Promise","all","handle","$x","expression","startsWith","waitForSelector","options","waitFor","waitForXPath","xpath","asElement","contentFrame","nodeInfo","client","send","objectId","node","frameId","clickablePoint","offset","layoutMetrics","catch","_client","quads","length","clientWidth","clientHeight","cssLayoutViewport","layoutViewport","filter","computeQuadArea","minX","Number","MAX_SAFE_INTEGER","minY","point","hover","mouse","move","click","drag","target","isDragInterceptionEnabled","start","dragEnter","data","items","dragOperationsMask","dragOver","drop","destination","dragAndDrop","startPoint","targetPoint","select","values","value","element","vals","Set","HTMLSelectElement","selectedValues","multiple","option","selected","has","add","dispatchEvent","Event","bubbles","uploadFile","isMultiple","filePaths","path","error","TypeError","files","filePath","win32","isAbsolute","posix","resolve","backendNodeId","DataTransfer","tap","touchscreen","focus","HTMLElement","type","text","keyboard","press","key","boundingBox","model","border","Math","min","width","max","height","boxModel","content","padding","margin","screenshot","needsViewportReset","viewport","newViewport","ceil","setViewport","Object","assign","pageX","pageY","cssVisualViewport","clip","imageData","isIntersectingViewport","threshold","visibleRatio","observer","IntersectionObserver","entries","intersectionRatio","disconnect","observe","_frameManager","page","_ElementHandle_scrollIntoViewIfNeeded","isConnected","nodeType","Node","ELEMENT_NODE","_err","pageJavascriptEnabled","scrollIntoView","block","inline","behavior","isJavaScriptEnabled","_ElementHandle_getOOPIFOffsets","currentFrame","parentFrame","parent","isOOPFrame","_id","contentBoxQuad","topLeftCorner","params","area","i","p1","p2","abs"],"sources":["../../../../src/common/ElementHandle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}