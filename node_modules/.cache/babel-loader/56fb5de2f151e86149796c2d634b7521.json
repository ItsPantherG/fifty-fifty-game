{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { debugError } from './util.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { isNode } from '../environment.js';\nimport { assert } from '../util/assert.js';\nimport { CDPBrowser } from './Browser.js';\nimport { Connection } from './Connection.js';\nimport { getFetch } from './fetch.js';\nconst getWebSocketTransportClass = async () => {\n  return isNode ? (await import('./NodeWebSocketTransport.js')).NodeWebSocketTransport : (await import('./BrowserWebSocketTransport.js')).BrowserWebSocketTransport;\n};\n/**\n * Users should never call this directly; it's called when calling\n * `puppeteer.connect`.\n *\n * @internal\n */\nexport async function _connectToCDPBrowser(options) {\n  const {\n    browserWSEndpoint,\n    browserURL,\n    ignoreHTTPSErrors = false,\n    defaultViewport = {\n      width: 800,\n      height: 600\n    },\n    transport,\n    slowMo = 0,\n    targetFilter,\n    _isPageTarget: isPageTarget\n  } = options;\n  assert(Number(!!browserWSEndpoint) + Number(!!browserURL) + Number(!!transport) === 1, 'Exactly one of browserWSEndpoint, browserURL or transport must be passed to puppeteer.connect');\n  let connection;\n  if (transport) {\n    connection = new Connection('', transport, slowMo);\n  } else if (browserWSEndpoint) {\n    const WebSocketClass = await getWebSocketTransportClass();\n    const connectionTransport = await WebSocketClass.create(browserWSEndpoint);\n    connection = new Connection(browserWSEndpoint, connectionTransport, slowMo);\n  } else if (browserURL) {\n    const connectionURL = await getWSEndpoint(browserURL);\n    const WebSocketClass = await getWebSocketTransportClass();\n    const connectionTransport = await WebSocketClass.create(connectionURL);\n    connection = new Connection(connectionURL, connectionTransport, slowMo);\n  }\n  const version = await connection.send('Browser.getVersion');\n  const product = version.product.toLowerCase().includes('firefox') ? 'firefox' : 'chrome';\n  const {\n    browserContextIds\n  } = await connection.send('Target.getBrowserContexts');\n  const browser = await CDPBrowser._create(product || 'chrome', connection, browserContextIds, ignoreHTTPSErrors, defaultViewport, undefined, () => {\n    return connection.send('Browser.close').catch(debugError);\n  }, targetFilter, isPageTarget);\n  return browser;\n}\nasync function getWSEndpoint(browserURL) {\n  const endpointURL = new URL('/json/version', browserURL);\n  const fetch = await getFetch();\n  try {\n    const result = await fetch(endpointURL.toString(), {\n      method: 'GET'\n    });\n    if (!result.ok) {\n      throw new Error(`HTTP ${result.statusText}`);\n    }\n    const data = await result.json();\n    return data.webSocketDebuggerUrl;\n  } catch (error) {\n    if (isErrorLike(error)) {\n      error.message = `Failed to fetch browser webSocket URL from ${endpointURL}: ` + error.message;\n    }\n    throw error;\n  }\n}","map":{"version":3,"mappings":"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","names":["debugError","isErrorLike","isNode","assert","CDPBrowser","Connection","getFetch","getWebSocketTransportClass","NodeWebSocketTransport","BrowserWebSocketTransport","_connectToCDPBrowser","options","browserWSEndpoint","browserURL","ignoreHTTPSErrors","defaultViewport","width","height","transport","slowMo","targetFilter","_isPageTarget","isPageTarget","Number","connection","WebSocketClass","connectionTransport","create","connectionURL","getWSEndpoint","version","send","product","toLowerCase","includes","browserContextIds","browser","_create","undefined","catch","endpointURL","URL","fetch","result","toString","method","ok","Error","statusText","data","json","webSocketDebuggerUrl","error","message"],"sources":["../../../../src/common/BrowserConnector.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}